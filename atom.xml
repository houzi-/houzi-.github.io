<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[HOUZI的博客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.router008.com/"/>
  <updated>2016-06-18T10:09:05.548Z</updated>
  <id>http://www.router008.com/</id>
  
  <author>
    <name><![CDATA[HOUZI的博客]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Tomato-shibby shadowsocks(mipsel+arm)]]></title>
    <link href="http://www.router008.com/2016/05/09/Tomato-ShadowSocks/"/>
    <id>http://www.router008.com/2016/05/09/Tomato-ShadowSocks/</id>
    <published>2016-05-09T10:51:00.000Z</published>
    <updated>2016-06-18T10:09:05.548Z</updated>
    <content type="html"><![CDATA[<h2 id="u51C6_u5907"><a href="#u51C6_u5907" class="headerlink" title="准备"></a>准备</h2><p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/shadowsocks-logo.png" alt=""></p>
<a id="more"></a>
<table><tr><td>Platform</td><td><center>mipsel</center></td><td><center>armv7</center></td></tr><tr><td>System</td><td>Tomato shibby v1.28.0000 MIPSR2-135</td><td>Tomato shibby v1.28.0000 K26ARM-136</td></tr><tr><td>Support</td><td><center>all</center></td><td><center>all</center></td></tr><tr><td>Depend</td><td>entware_mipsel-install_arm.sh</td><td>entware_arm-install_arm.sh</td></tr></table>

<h2 id="u6302_u8F7DJFFS_u5206_u533A_u6216USB_u5206_u533A"><a href="#u6302_u8F7DJFFS_u5206_u533A_u6216USB_u5206_u533A" class="headerlink" title="挂载JFFS分区或USB分区"></a>挂载JFFS分区或USB分区</h2><p><code>挂载JFFS分区</code></p>
<p><strong>Administration &gt;&gt; JFFS &gt;&gt; Format/Erase &gt;&gt; save</strong></p>
<p><code>挂载USB_disk分区</code></p>
<p><strong><font color="red">note:</font>如果你的固件并不支持jffs分区，可以选择挂载USB_DISK的方式(If you have enough space jffs)</strong></p>
<p><strong>输入 <code>fdisk -l /dev/sda</code> 查看分区表信息</strong></p>
<p>Disk /dev/sda: 15.9 GB, 15931539456 bytes<br>255 heads, 63 sectors/track, 1936 cylinders<br>Units = cylinders of 16065 * 512 = 8225280 bytes</p>
<p>Device Boot      Start         End      Blocks  Id System<br><code>/dev/sda1</code>               1        1937    15558112+  c Win95 FAT32 (LBA)</p>
<p><strong>我们从以上的信息中可以看出你的分区表信息 <code>/dev/sda1</code></strong><br><strong>输入 <code>umount -l /dev/sda1</code> 强制卸载正在挂载的分区</strong><br><strong>输入 <code>mkfs.ext3 /dev/sda1</code> 把当前分区的文件系统格式化为ext3/4</strong></p>
<h2 id="u4FEE_u6539_u811A_u672C_u5B89_u88C5_u8DEF_u5F84"><a href="#u4FEE_u6539_u811A_u672C_u5B89_u88C5_u8DEF_u5F84" class="headerlink" title="修改脚本安装路径"></a>修改脚本安装路径</h2><p><strong><font color="red">note:</font>去文章最后提供的安装脚本下载地址，下载安装脚本上传到路由器的<code>/tmp</code>目录</strong></p>
<p><strong>查找脚本中这一行命令:<code>PREFIX=/jffs</code></strong></p>
<ol>
<li><strong>如果你的挂载分区是<code>/jffs</code>你可以保持默认</strong></li>
<li><strong>如果你的挂载分区是USB_DISK,你需要改变一下！比如:<code>PREFIX=/mnt/sda1</code></strong></li>
</ol>
<h2 id="u5B89_u88C5_u811A_u672C"><a href="#u5B89_u88C5_u811A_u672C" class="headerlink" title="安装脚本"></a>安装脚本</h2><p><strong>下载这些插件<code>shadowsocks-libev_2.4.6-RE、chinadns_1.3.2、pdnsd_1.2.9a、pcap-dnsproxy0.4.5.3-1、resolvip_0.1(not necessary)、diffutils3.3-3 dnscrypt-proxy_1.6.1-1 curl_7.47.2-DEV(mipsel) dnsmasq-2.75 cron_4.1-2 zoneinfo-asia_2016b-1</code>上传到路由器的<code>/tmp</code>目录</strong></p>
<p><strong>输入<code>chmod +x /tmp/shadowsocks</code>给予脚本可执行权限</strong><br><strong>脚本安装命令<code>/tmp/shadowsocks -su</code></strong></p>
<p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/tomato_ss1.PNG" alt=""></p>
<h2 id="u914D_u7F6E_u8D26_u53F7_u4FE1_u606F"><a href="#u914D_u7F6E_u8D26_u53F7_u4FE1_u606F" class="headerlink" title="配置账号信息"></a>配置账号信息</h2><p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/tomato_ss_2.PNG" alt=""></p>
<p><strong><font color="red">note:</font>Local Server Port and Sever Port Do not backwards</strong></p>
<h2 id="u9009_u62E9_u65B9_u6848"><a href="#u9009_u62E9_u65B9_u6848" class="headerlink" title="选择方案"></a>选择方案</h2><table><tr><td>Option</td><td><center>mipsel+armv7</center></td></tr><tr><td><center>1</center></td><td>ss-redir+gfwlist+pdnsd</td></tr><tr><td><center>2</center></td><td>ss-redir+chnroutes+chinadns+pdnsd</td></tr><tr><td><center>3</center></td><td>ss-redir+chnroutes+chinadns+dnscrypt-proxy</td></tr><tr><td><center>4</center></td><td>ss-redir+chnroutes+pcap_dnsproxy</td></tr><tr><td><center>5</center></td><td>ss-tunnel+chnroutes+chinadns</td></tr></table>

<p><strong><font color="red">note:</font></strong></p>
<ol>
<li><strong>以上方案的选择根据自己的使用习惯选择！</strong></li>
<li><strong>如果你使用方案4，你需要密切注意Pcap_DNSProxy这个进程是否正常启动，如果不正常直接输入<code>/opt/etc/init.d/S27pcap_dnsproxy start</code>(不建议使用，太耗费资源！)</strong></li>
<li><strong>我现在使用的就是方案3，稳定性不错推荐使用！(推荐使用，很轻量！)</strong></li>
</ol>
<h2 id="u91CD_u542F_u8DEF_u7531_u5668"><a href="#u91CD_u542F_u8DEF_u7531_u5668" class="headerlink" title="重启路由器"></a>重启路由器</h2><h2 id="FQ"><a href="#FQ" class="headerlink" title="FQ"></a>FQ</h2><p><strong>Pcap_DNSProxy配置文件</strong></p>
<p><font color="red">note:</font>Edit Pcap_DNSProxy of <code>Config.conf</code> file ( The file path : /opt/etc/pcap_dnsproxy)</p>
<p><font color="red">note:</font>如果是<code>mipsel</code>平台的不建议使用方案4</p>
<pre><code>[Local DNS]
Local Protocol = IPv4 + UDP
Local Hosts = 0
Local Main = 0
Local Routing = 0
*/ To use the domain name within the DNS server to resolve the territory to accelerate the speed of access to CDN capabilities , please choose one of the programs , restart services after the completion of the configuration:/*
*/ Local Main = 1 At the same time Local Routing = 1 Open the territory address routing table recognition/*
*/ Local Hosts = 1 Open territory domain whitelist feature/*

[Addresses]
IPv4 Listen Address = 
IPv4 EDNS Client Subnet Address =
IPv4 DNS Address = 202.12.27.33:53 #Foreign DNS, I am here to fill local VPS &apos;s DNS, if you do not know directly 8.8.8.8:53
IPv4 Alternate DNS Address = 8.8.4.4:53|208.67.220.220:443|208.67.222.222:5353 #Alternate DNS, keep the default
IPv4 Local DNS Address = 114.114.114.114:53 #Domestic DNS. Try to fill your own ISP&apos;s DNS
IPv4 Local Alternate DNS Address = 114.114.115.115:53:53 #Alternate DNS
</code></pre><h2 id="u4F7F_u7528_u6307_u5357"><a href="#u4F7F_u7528_u6307_u5357" class="headerlink" title="使用指南"></a>使用指南</h2><blockquote>
<p><a href="http://www.router008.com/2016/02/14/Tomato-shadowsocks-Scripting-Guide/">http://www.router008.com/2016/02/14/Tomato-shadowsocks-Scripting-Guide/</a></p>
</blockquote>
<h2 id="u4E0B_u8F7D"><a href="#u4E0B_u8F7D" class="headerlink" title="下载"></a>下载</h2><p><font color="red">note:</font> VER:6.0 <strong>(You need to re- deployment script)</strong></p>
<p><a href="https://github.com/houzi-/tomato-shadowsocks/releases" target="_blank" rel="external">shadowsocks script</a><br><a href="http://pan.baidu.com/s/1mgYlk28" target="_blank" rel="external">mipsel packages</a> <strong>password:<code>i3q0</code></strong><br><a href="http://pan.baidu.com/s/1dDNAdXn" target="_blank" rel="external">armv7 packages</a> <strong>password:<code>pldi</code></strong></p>
<h2 id="u56FA_u4EF6_u4E0B_u8F7D_28_u5185_u6838_u5F00_u542FTPROXY_29"><a href="#u56FA_u4EF6_u4E0B_u8F7D_28_u5185_u6838_u5F00_u542FTPROXY_29" class="headerlink" title="固件下载(内核开启TPROXY)"></a>固件下载(内核开启TPROXY)</h2><p><a href="http://pan.baidu.com/s/1cibzum" target="_blank" rel="external">Tomato-shibby-ARMV7 firmware</a> <strong>password:<code>vibr</code></strong></p>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://github.com/shadowsocks/shadowsocks-libev#usage" title="https://github.com/shadowsocks/shadowsocks-libev#usage" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-libev#usage</a><br><a href="https://github.com/shadowsocks/openwrt-shadowsocks/blob/master/files/shadowsocks.rule" title="https://github.com/shadowsocks/openwrt-shadowsocks/blob/master/files/shadowsocks.rule" target="_blank" rel="external">https://github.com/shadowsocks/openwrt-shadowsocks/blob/master/files/shadowsocks.rule</a><br><a href="https://github.com/chengr28/Pcap_DNSProxy" title="https://github.com/chengr28/Pcap_DNSProxy" target="_blank" rel="external">https://github.com/chengr28/Pcap_DNSProxy</a></p>
</blockquote>
<h2 id="u95EE_u9898_u53CD_u9988"><a href="#u95EE_u9898_u53CD_u9988" class="headerlink" title="问题反馈"></a>问题反馈</h2><blockquote>
<p>Found a Bug? Plea se report at <a href="https://github.com/houzi-/tomato-shadowsocks/issues" target="_blank" rel="external">https://github.com/houzi-/tomato-shadowsocks/issues</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u51C6_u5907"><a href="#u51C6_u5907" class="headerlink" title="准备"></a>准备</h2><p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/shadowsocks-logo.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Tomato" scheme="http://www.router008.com/tags/Tomato/"/>
    
      <category term="路由器" scheme="http://www.router008.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="Tomato" scheme="http://www.router008.com/categories/Tomato/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[DD-WRT-ShadowSocks(arm+?)]]></title>
    <link href="http://www.router008.com/2016/05/09/DD-WRT-ShadowSocks/"/>
    <id>http://www.router008.com/2016/05/09/DD-WRT-ShadowSocks/</id>
    <published>2016-05-09T10:51:00.000Z</published>
    <updated>2016-07-12T11:55:06.469Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/shadowsocks-logo.png" alt=""></p>
<a id="more"></a>
<h2 id="u51C6_u5907"><a href="#u51C6_u5907" class="headerlink" title="准备"></a>准备</h2><table><tr><td>Platform</td><td><center>armv7</center></td></tr><tr><td>System</td><td><center>DD-WRT</center></td></tr><tr><td>Support</td><td><center>all</center></td></tr><tr><td>Depend</td><td><center>entware_arm-install_arm.sh</center></td></tr><tr><td>Kernel</td><td><center>3.10.x</center></td></tr></table>

<h2 id="u6302_u8F7DJFFS_u5206_u533A_u6216USB_u5206_u533A_28_u4E8C_u9009_u4E00_29"><a href="#u6302_u8F7DJFFS_u5206_u533A_u6216USB_u5206_u533A_28_u4E8C_u9009_u4E00_29" class="headerlink" title="挂载JFFS分区或USB分区(二选一)"></a>挂载JFFS分区或USB分区(二选一)</h2><p><code>挂载JFFS分区</code></p>
<p><strong>Administration &gt;&gt; JFFS &gt;&gt; (Internal Flash Storage)Enable/(Clean Internal Flash Storage)Enable &gt;&gt; save &gt;&gt; Apply Settings</strong></p>
<p><code>挂载USB_disk分区</code><font color="red"><strong>(如果选择安装在/jffs分区,以下这部分教程可以忽略,<u>直接跳到修改安装脚本路径部分</u>)</strong></font></p>
<p><strong><font color="red">note:</font>如果你的固件并不支持jffs分区，可以选择挂载USB_DISK的方式(If you have enough space jffs)</strong></p>
<p><strong>输入 <code>fdisk -l /dev/sda</code> 查看分区表信息</strong></p>
<p>Disk /dev/sda: 7742 MB, 7742685184 bytes<br>84 heads, 38 sectors/track, 4737 cylinders<br>Units = cylinders of 3192 * 512 = 1634304 bytes</p>
<p>   Device Boot      Start         End      Blocks  Id System<br><code>/dev/sda1               1        4738     7561197   b Win95 FAT32</code></p>
<p><strong>我们从以上的信息中可以看出你的分区表信息 <code>/dev/sda1</code></strong><br><strong>输入 <code>umount -l /dev/sda1</code> 强制卸载正在挂载的分区</strong></p>
<font color="red"><strong>注意:</strong></font><br>使用<code>lsmod | grep ext</code>这个命令查看一下ext3模块是否正确挂载，如果没有挂载请输入以下命令(<strong>如果没有挂载这些模块将无法格式化为ext3文件系统</strong>):<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">modprobe ext2</span><br><span class="line">modprobe ext3</span><br><span class="line">modprobe ext4</span><br></pre></td></tr></table></figure><br><br><strong>再输入 <code>mkfs.ext3 /dev/sda1</code> 把当前分区的文件系统格式化为ext3/4<u>(此过程可能有些久)</u></strong><br><font color="red"><strong>重启路由器一下,然后继续以下教程</strong></font>

<h2 id="u4FEE_u6539_u811A_u672C_u5B89_u88C5_u8DEF_u5F84"><a href="#u4FEE_u6539_u811A_u672C_u5B89_u88C5_u8DEF_u5F84" class="headerlink" title="修改脚本安装路径"></a>修改脚本安装路径</h2><p><strong><font color="red">note:</font>去文章最后提供的安装脚本下载地址，下载安装脚本上传到路由器的<code>/tmp</code>目录</strong></p>
<p><strong>查找脚本中这一行命令:<code>PREFIX=/jffs</code></strong></p>
<ol>
<li><strong>如果你的挂载分区是<code>/jffs</code>你可以保持默认</strong></li>
<li><strong>如果你的挂载分区是USB_DISK,你需要改变一下！比如:<code>PREFIX=/mnt/sda1</code></strong></li>
</ol>
<h2 id="u5B89_u88C5_u811A_u672C"><a href="#u5B89_u88C5_u811A_u672C" class="headerlink" title="安装脚本"></a>安装脚本</h2><p><strong>下载这些插件<code>shadowsocks-libev_2.4.7-RE、chinadns_1.3.2、pdnsd_1.2.9a、pcap-dnsproxy0.4.6.0-1、diffutils3.3-3、dnscrypt-proxy_1.6.1-1、iptables_1.4.21-RE_armv7soft</code>上传到路由器的<code>/tmp</code>目录</strong></p>
<p><strong><font color="red">note:</font>只需要下载文章中提到的这些插件，不要把一些无关的插件也上传到路由器里</strong><br><strong>输入<code>chmod +x /tmp/shadowsocks</code>给予脚本可执行权限</strong><br><strong>脚本安装命令<code>/tmp/shadowsocks -su</code></strong></p>
<p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/tomato_ss1.PNG" alt=""></p>
<h2 id="u914D_u7F6E_u8D26_u53F7_u4FE1_u606F"><a href="#u914D_u7F6E_u8D26_u53F7_u4FE1_u606F" class="headerlink" title="配置账号信息"></a>配置账号信息</h2><p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/tomato_ss_2.PNG" alt=""></p>
<p><strong><font color="red">note:</font>注意一下Local Port和Server Port的区别</strong></p>
<h2 id="u9009_u62E9_u65B9_u6848"><a href="#u9009_u62E9_u65B9_u6848" class="headerlink" title="选择方案"></a>选择方案</h2><table><tr><td>Option</td><td><center>armv7</center></td></tr><tr><td><center>1</center></td><td>ss-redir+gfwlist+pdnsd</td></tr><tr><td><center>2</center></td><td>ss-redir+chnroutes+chinadns+pdnsd</td></tr><tr><td><center>3</center></td><td>ss-redir+chnroutes+chinadns+dnscrypt-proxy</td></tr><tr><td><center>4</center></td><td>ss-redir+chnroutes+pcap_dnsproxy</td></tr><tr><td><center>5</center></td><td>ss-tunnel+chnroutes+chinadns</td></tr></table>

<p><strong><font color="red">note:</font></strong></p>
<ol>
<li><strong>以上方案的选择根据自己的使用习惯选择！</strong></li>
<li><strong>如果你使用方案4，你需要密切注意Pcap_DNSProxy这个进程是否正常启动，如果不正常直接输入<code>/opt/etc/init.d/S27pcap_dnsproxy start</code>(不建议使用，太耗费资源！)</strong></li>
<li><strong>我现在使用的就是方案3，稳定性不错推荐使用！(推荐使用，很轻量！)</strong></li>
</ol>
<h2 id="u91CD_u542F_u8DEF_u7531_u5668"><a href="#u91CD_u542F_u8DEF_u7531_u5668" class="headerlink" title="重启路由器"></a>重启路由器</h2><h2 id="FQ"><a href="#FQ" class="headerlink" title="FQ"></a>FQ</h2><p><strong>Pcap_DNSProxy配置文件</strong></p>
<p><font color="red">note:</font>Edit Pcap_DNSProxy of <code>Config.conf</code> file ( The file path : /opt/etc/pcap_dnsproxy)</p>
<pre><code>[Local DNS]
Local Protocol = IPv4 + UDP
Local Hosts = 0
Local Main = 0
Local Routing = 0
*/ To use the domain name within the DNS server to resolve the territory to accelerate the speed of access to CDN capabilities , please choose one of the programs , restart services after the completion of the configuration:/*
*/ Local Main = 1 At the same time Local Routing = 1 Open the territory address routing table recognition/*
*/ Local Hosts = 1 Open territory domain whitelist feature/*

[Addresses]
IPv4 Listen Address = 
IPv4 EDNS Client Subnet Address =
IPv4 DNS Address = 202.12.27.33:53 #Foreign DNS, I am here to fill local VPS &apos;s DNS, if you do not know directly 8.8.8.8:53
IPv4 Alternate DNS Address = 8.8.4.4:53|208.67.220.220:443|208.67.222.222:5353 #Alternate DNS, keep the default
IPv4 Local DNS Address = 114.114.114.114:53 #Domestic DNS. Try to fill your own ISP&apos;s DNS
IPv4 Local Alternate DNS Address = 114.114.115.115:53:53 #Alternate DNS
</code></pre><h2 id="u4F7F_u7528_u6307_u5357"><a href="#u4F7F_u7528_u6307_u5357" class="headerlink" title="使用指南"></a>使用指南</h2><p><strong><font color="red">(使用指南里面有如何排除错误的教程)</font></strong></p>
<blockquote>
<p><a href="http://www.router008.com/2016/02/14/ShadowSocks-Scripting-Guide/">http://www.router008.com/2016/02/14/ShadowSocks-Scripting-Guide/</a></p>
</blockquote>
<h2 id="u4E0B_u8F7D"><a href="#u4E0B_u8F7D" class="headerlink" title="下载"></a>下载</h2><blockquote>
<p><a href="http://pan.baidu.com/s/1gfxyXNl" target="_blank" rel="external">DD-WRT-ARMV7 packages</a> <strong>password:<code>xud9</code></strong><br><a href="https://github.com/houzi-/dd-wrt-shadowsocks/releases" target="_blank" rel="external">dd-wrt-shadowsocks script</a></p>
</blockquote>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://github.com/shadowsocks/shadowsocks-libev#usage" title="https://github.com/shadowsocks/shadowsocks-libev#usage" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-libev#usage</a><br><a href="https://github.com/shadowsocks/openwrt-shadowsocks/blob/master/files/shadowsocks.rule" title="https://github.com/shadowsocks/openwrt-shadowsocks/blob/master/files/shadowsocks.rule" target="_blank" rel="external">https://github.com/shadowsocks/openwrt-shadowsocks/blob/master/files/shadowsocks.rule</a><br><a href="https://github.com/chengr28/Pcap_DNSProxy" title="https://github.com/chengr28/Pcap_DNSProxy" target="_blank" rel="external">https://github.com/chengr28/Pcap_DNSProxy</a><br><a href="https://www.dd-wrt.com/wiki/index.php/Development" title="https://www.dd-wrt.com/wiki/index.php/Development" target="_blank" rel="external">https://www.dd-wrt.com/wiki/index.php/Development</a></p>
</blockquote>
<h2 id="u95EE_u9898_u53CD_u9988"><a href="#u95EE_u9898_u53CD_u9988" class="headerlink" title="问题反馈"></a>问题反馈</h2><blockquote>
<p>Found a Bug? Plea se report at <a href="https://github.com/houzi-/dd-wrt-shadowsocks/issues" target="_blank" rel="external">https://github.com/houzi-/dd-wrt-shadowsocks/issues</a>.</p>
</blockquote>
<h2 id="u56FA_u4EF6_u4E0B_u8F7D__28_u5185_u6838_u5F00_u542FTPROXY_29"><a href="#u56FA_u4EF6_u4E0B_u8F7D__28_u5185_u6838_u5F00_u542FTPROXY_29" class="headerlink" title="固件下载 (内核开启TPROXY)"></a>固件下载 (内核开启TPROXY)</h2><p><a href="http://pan.baidu.com/s/1qYekA6o" target="_blank" rel="external">DD-WRT-ARMV7 firmware</a> <strong>password:<code>lijo</code></strong></p>
<h2 id="u5C55_u793A"><a href="#u5C55_u793A" class="headerlink" title="展示"></a>展示</h2><p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/ipset.PNG" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/shadowsocks-logo.png" alt=""></p>]]>
    
    </summary>
    
      <category term="DD-WRT" scheme="http://www.router008.com/tags/DD-WRT/"/>
    
      <category term="路由器" scheme="http://www.router008.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="DD-WRT" scheme="http://www.router008.com/categories/DD-WRT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[不服就来跑个分]]></title>
    <link href="http://www.router008.com/2016/04/10/cpubench/"/>
    <id>http://www.router008.com/2016/04/10/cpubench/</id>
    <published>2016-04-10T06:47:05.000Z</published>
    <updated>2016-05-09T13:37:22.812Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/cpubench.jpg" alt=""></p>
<a id="more"></a>
<h2 id="u626F_u6DE1"><a href="#u626F_u6DE1" class="headerlink" title="扯淡"></a>扯淡</h2><p>天气变热了，内心也变得躁动，总是坐不住(つ``ˉ³ˉ)つ总想干一些很特别的事情来降降火！天气热最好不要看太多的书，最近看太多的太多的专业书导致大脑有点呆滞！得搞个好玩的东西来让自己放松和吓吓火</p>
<h2 id="u53D1_u73B0"><a href="#u53D1_u73B0" class="headerlink" title="发现"></a>发现</h2><p>前几天无聊逛OpenWRT project的仓库的时候发现这个玩意<code>cpubench</code>，一开始不知道是干什么用的，不过从名字上来看肯定跟<code>SOC</code>有关，看了有关的Makefile介绍以后….原来是干这个的….”不服来跑分”——Mr.Lei (＾O＾)/,二话不说,直接撸个回来，放到Tomato上跑跑喽！</p>
<h2 id="u73A9_u5177"><a href="#u73A9_u5177" class="headerlink" title="玩具"></a>玩具</h2><p>代码块:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> VERSION_STR <span class="string">"v0.6"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> overhead = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> begin_secs = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real_get_seconds</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">true<span class="keyword">struct</span> timeval tv;</span><br><span class="line">true<span class="keyword">double</span> total;</span><br><span class="line"></span><br><span class="line">truegettimeofday(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">truetotal = (<span class="keyword">double</span>)tv.tv_sec;</span><br><span class="line">truetotal += ((<span class="keyword">double</span>)tv.tv_usec)/(<span class="keyword">double</span>)<span class="number">1000000.0</span>;</span><br><span class="line"></span><br><span class="line">true<span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_seconds</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (begin_secs == <span class="number">0</span>)</span><br><span class="line">true&#123;</span><br><span class="line">truetruebegin_secs = real_get_seconds();</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="keyword">return</span> (real_get_seconds() - begin_secs);</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h2 id="u7F16_u8BD1_u65B9_u6CD5"><a href="#u7F16_u8BD1_u65B9_u6CD5" class="headerlink" title="编译方法"></a>编译方法</h2><p><code>gcc -O0 -c -o cpubench.o openwrt_cpu_bench_v06.c</code><br><code>gcc -static -o cpubench cpubench.o</code></p>
<p>或者</p>
<p><code>gcc -std=gnu99 -static openwrt_cpu_bench_v06.c -o cpubench</code></p>
<h3 id="u6E90_u7801_u4E0B_u8F7D"><a href="#u6E90_u7801_u4E0B_u8F7D" class="headerlink" title="源码下载"></a>源码下载</h3><blockquote>
<p><a href="https://github.com/houzi-/cpubench.git" target="_blank" rel="external">cpubench</a></p>
</blockquote>
<p>要问我这个两个编译方法区别，我是不会回答这个高难度问题的，麻烦你自己去看编译原理喽！</p>
<h2 id="u4E8C_u8FDB_u5236_u6587_u4EF6_u4E0B_u8F7D_28_u53EA_u7F16_u8BD1_u4E86armv7_29"><a href="#u4E8C_u8FDB_u5236_u6587_u4EF6_u4E0B_u8F7D_28_u53EA_u7F16_u8BD1_u4E86armv7_29" class="headerlink" title="二进制文件下载(只编译了armv7)"></a>二进制文件下载(只编译了armv7)</h2><blockquote>
<p><a href="http://pan.baidu.com/s/1dDNAdXn" target="_blank" rel="external">armv7 packages</a> <strong>password:<code>pldi</code></strong></p>
</blockquote>
<h2 id="u8DD1_u5206"><a href="#u8DD1_u5206" class="headerlink" title="跑分"></a>跑分</h2><p><code>./cpubench</code></p>
<h3 id="u7ED3_u679C"><a href="#u7ED3_u679C" class="headerlink" title="结果"></a>结果</h3><p>我还特意跑了很多遍才贴出来这个我认为比较NB的结果出来! (＾O＾)/</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@HOUZI:/tmp/home/root# ./cpubench</span><br><span class="line">This is CPU and memory benchmark for OpenWRT v0.6. This will then take some time... (typically 30-60 seconds on a 200MHz computer)</span><br><span class="line">Overhead for getting time: 2us</span><br><span class="line">Time to run memory bench: 1.18[secs]</span><br><span class="line">Time to run computation of pi (2400 digits, 10 times): 4.74[secs]</span><br><span class="line">Time to run computation of e (9009 digits): 4.11[secs]</span><br><span class="line">Time to run float bench: 0.04[secs]</span><br><span class="line">Total time: 10.1s</span><br></pre></td></tr></table></figure>
<h2 id="u4E00_u8D77_u6765_u8DD1_u4E2A_u5206_u5427"><a href="#u4E00_u8D77_u6765_u8DD1_u4E2A_u5206_u5427" class="headerlink" title="一起来跑个分吧"></a>一起来跑个分吧</h2><p><strong>“you can you up,no can no bb!”</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/cpubench.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="Tomato" scheme="http://www.router008.com/tags/Tomato/"/>
    
      <category term="路由器" scheme="http://www.router008.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="编程" scheme="http://www.router008.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的python的新想法]]></title>
    <link href="http://www.router008.com/2016/04/05/python/"/>
    <id>http://www.router008.com/2016/04/05/python/</id>
    <published>2016-04-05T02:46:16.000Z</published>
    <updated>2016-05-09T13:36:48.053Z</updated>
    <content type="html"><![CDATA[<h2 id="u6838_u5FC3_u4EE3_u7801_u5757"><a href="#u6838_u5FC3_u4EE3_u7801_u5757" class="headerlink" title="核心代码块"></a>核心代码块</h2><p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/python.png" alt=""></p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetCatPath</span><span class="params">(self)</span>:</span> <span class="comment">#主函数</span></span><br><span class="line">data = copy.deepcopy(self.map)</span><br><span class="line"><span class="comment">#data = self.map</span></span><br><span class="line">self.result=<span class="string">''</span> <span class="comment">#结果存放处</span></span><br><span class="line"><span class="comment">#方向定义</span></span><br><span class="line"><span class="comment">#dirs = [[-1,0,'L'],[0,-1,'U'],[1,0,'R'],[0,1,'D']]</span></span><br><span class="line"><span class="comment">#dirs2 = [[-1,0,'L'],[0,-1,'U'],[1,-1,'E'],[1,0,'R'],[1,1,'V'],[0,1,'D']]#%2=0</span></span><br><span class="line"><span class="comment">#dirs1 = [[-1,0,'L'],[-1,-1,'Q'],[0,-1,'U'],[1,0,'R'],[0,1,'D'],[-1,1,'Z']]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(path,x,y,field)</span>:</span> <span class="comment">#移动函数</span></span><br><span class="line">truepathlen = len(path)</span><br><span class="line">trueresultlen = len(self.result)</span><br><span class="line">true<span class="keyword">if</span> pathlen &gt;= resultlen <span class="keyword">and</span> resultlen != <span class="number">0</span>:<span class="comment">#这个条件很重要，当此时查找的路线已经比之前的长时就没必要查找了</span></span><br><span class="line">truetrue<span class="keyword">return</span></span><br><span class="line">truefield[y][x] = pathlen + <span class="number">1</span> <span class="comment">#把自己变成1, 防止无限递归</span></span><br><span class="line">true<span class="keyword">if</span> x <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">8</span>] <span class="keyword">or</span> y <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">8</span>]: <span class="comment">#如果到终点了</span></span><br><span class="line">truetrue<span class="keyword">if</span> resultlen &gt; pathlen <span class="keyword">or</span> resultlen == <span class="number">0</span>:</span><br><span class="line">truetruetrueself.result = path<span class="comment">#将路径放入结果</span></span><br><span class="line">truetruetrue<span class="keyword">return</span></span><br><span class="line">truedirs = self.dirs1</span><br><span class="line">true<span class="keyword">if</span> y <span class="keyword">in</span> self.quickmodlist:<span class="comment">#发现比取模快上那么点</span></span><br><span class="line">truetruedirs = self.dirs2</span><br><span class="line">true<span class="keyword">for</span> d <span class="keyword">in</span> dirs: <span class="comment">#检查六个方向</span></span><br><span class="line">truetrue<span class="keyword">if</span> y+d[<span class="number">1</span>] <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">9</span>) <span class="keyword">and</span> x+d[<span class="number">0</span>] <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">9</span>):</span><br><span class="line">truetruetrue<span class="keyword">if</span> field[y+d[<span class="number">1</span>]][x+d[<span class="number">0</span>]] &gt; pathlen+<span class="number">1</span> <span class="keyword">or</span> field[y+d[<span class="number">1</span>]][x+d[<span class="number">0</span>]] == <span class="number">0</span>: <span class="comment">#如果某个方向为0</span></span><br><span class="line">truetruetruetruemove(path+d[<span class="number">2</span>],x+d[<span class="number">0</span>],y+d[<span class="number">1</span>],field) <span class="comment">#递归</span></span><br><span class="line">move(<span class="string">''</span>,self.catpos[<span class="number">0</span>],self.catpos[<span class="number">1</span>],data) <span class="comment">#调用移动函数, 此时路径为空</span></span><br><span class="line">self.waysmap = data</span><br><span class="line"><span class="comment">#self.PrintMap()</span></span><br><span class="line"><span class="comment">#print ''</span></span><br><span class="line"><span class="comment">#self.PrintWaysMap()</span></span><br><span class="line"><span class="keyword">return</span> self.result</span><br></pre></td></tr></table></figure>
<p>递归查找可能的路线，判断返回条件（如路线超过了前面的则返回或者是找到了新的路线），将直接决定你搜索的时间，原则是找到最短路径，这里可以加上通路数。<br>另外假设从0行开始，围住神经猫地图有个特性就是能取2的模为1的行都可以向右上，右下走，而为0的则可以向左上，左下走，所以要用行数判断具体的行走方向。</p>
<h2 id="u9009_u62E9_u4E0E_u5224_u65AD"><a href="#u9009_u62E9_u4E0E_u5224_u65AD" class="headerlink" title="选择与判断"></a>选择与判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shuffle</span><span class="params">(self, dataList)</span>:</span></span><br><span class="line">l = len(dataList)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(l):</span><br><span class="line">truej = random.randint(i,l-<span class="number">1</span>)</span><br><span class="line">truedataList[j],dataList[i] = dataList[i],dataList[j]</span><br><span class="line">truetruetrue</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetRandomWays</span><span class="params">(self, col, row)</span>:</span></span><br><span class="line"><span class="keyword">if</span> col <span class="keyword">in</span> [<span class="number">0</span>, self.col-<span class="number">1</span>] <span class="keyword">or</span> row <span class="keyword">in</span> [<span class="number">0</span>, self.row-<span class="number">1</span>]:</span><br><span class="line">true<span class="keyword">return</span> col, row</span><br><span class="line">dirs = self.dirs1</span><br><span class="line"><span class="keyword">if</span> row <span class="keyword">in</span> self.quickmodlist:</span><br><span class="line">truedirs = self.dirs2</span><br><span class="line">randomlist = []</span><br><span class="line">true</span><br><span class="line">ways = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> dirs: <span class="comment">#检查六个方向</span></span><br><span class="line">true<span class="keyword">if</span> self.IsFree(col+d[<span class="number">0</span>], row+d[<span class="number">1</span>]):</span><br><span class="line">truetrue<span class="comment">#tempway = self.GetWays(col+d[0], row+d[1])</span></span><br><span class="line">truetrue<span class="comment">#if tempway &gt; ways:</span></span><br><span class="line">truetrue<span class="comment">#	ways = tempway</span></span><br><span class="line">truetrue<span class="comment">#	randomlist = [(col+d[0], row+d[1])]</span></span><br><span class="line">truetrue<span class="comment">#elif tempway == ways:</span></span><br><span class="line">truetruetruerandomlist.append((col+d[<span class="number">0</span>], row+d[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">self.shuffle(randomlist)</span><br><span class="line"><span class="keyword">if</span> len(randomlist):</span><br><span class="line">true<span class="keyword">if</span> len(randomlist) &gt; <span class="number">1</span> <span class="keyword">and</span> (self.oldpos[<span class="number">0</span>], self.oldpos[<span class="number">1</span>]) <span class="keyword">in</span> randomlist:</span><br><span class="line">truetruerandomlist.remove((self.oldpos[<span class="number">0</span>], self.oldpos[<span class="number">1</span>]))</span><br><span class="line">true<span class="keyword">return</span> randomlist[<span class="number">0</span>][<span class="number">0</span>],  randomlist[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">truetruetrue</span><br><span class="line"><span class="keyword">return</span> -<span class="number">2</span>,-<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>掉自己之前的位置，如果实在无路可走则走之前的位置，这里说的无路可走是指通路相等的情况。<br>这个算法实现起来并不难，但有很多细节需要注意。</p>
<h2 id="ME"><a href="#ME" class="headerlink" title="ME"></a>ME</h2><p>最近大脑有点空白，还有最近都在玩路由器，NND感觉我快荒废了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6838_u5FC3_u4EE3_u7801_u5757"><a href="#u6838_u5FC3_u4EE3_u7801_u5757" class="headerlink" title="核心代码块"></a>核心代码块</h2><p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/python.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://www.router008.com/tags/Python/"/>
    
      <category term="编程" scheme="http://www.router008.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Python" scheme="http://www.router008.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tomato-ShadowSocks(armv7+mipsel)部署(ADM/adbyby)广告过滤]]></title>
    <link href="http://www.router008.com/2016/03/25/Tomato-adm/"/>
    <id>http://www.router008.com/2016/03/25/Tomato-adm/</id>
    <published>2016-03-25T08:56:53.000Z</published>
    <updated>2016-05-09T13:36:39.535Z</updated>
    <content type="html"><![CDATA[<h2 id="u90E8_u7F72_u539F_u56E0"><a href="#u90E8_u7F72_u539F_u56E0" class="headerlink" title="部署原因"></a>部署原因</h2><p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/adm.jpg" alt=""></p>
<p>有同学会问我，为什么你突发奇想来弄广告过滤，呵呵！我真的不好意思说出口了(T＿T)! 最近我在看《太阳的什么鬼后裔》,每次看一集就来个一分多钟的广告，真的是受不了！有人直接说直接在浏览器或者电脑上安装得了，有必要弄得这么麻烦吗？Oh,shit! My world you do not know! 作为一名准程序员和GEEK必须得装一下逼ψ(｀∇´)ψ,不扯B了…..</p>
<a id="more"></a>
<h2 id="u90E8_u7F72_u8FC7_u7A0B"><a href="#u90E8_u7F72_u8FC7_u7A0B" class="headerlink" title="部署过程"></a>部署过程</h2><p><font color="red">note:</font>本教程依赖于<a href="https://github.com/houzi-/tomato-shadowsocks/releases" target="_blank" rel="external">Tomato-shadowsocks</a>脚本,因此可以和shadowsocks-libev共同使用,不会产生冲突！</p>
<h3 id="u5B89_u88C5ADM"><a href="#u5B89_u88C5ADM" class="headerlink" title="安装ADM"></a>安装ADM</h3><p><font color="red">note:</font>如果是第一次部署<code>Tomato-shadowsocks</code>脚本,别直接安装ADM,要部署&lt; <a href="http://www.router008.com/2016/02/03/Tomato-ShadowSocks/"><font color="red">教程</font></a> &gt;完脚本后再进行安装！<br>上传<code>admflt_1.3.3_armv7soft.ipk(armv7) adbyby_2.5.0-1_mipselsf.ipk(mipsel)</code>到<code>/tmp</code>目录,然后<code>opkg install xxxx.ipk</code></p>
<h3 id="Tomato-shadowsocks_u5F00_u542F_u652F_u6301"><a href="#Tomato-shadowsocks_u5F00_u542F_u652F_u6301" class="headerlink" title="Tomato-shadowsocks开启支持"></a>Tomato-shadowsocks开启支持</h3><p>(armv7)在脚本的32行:<code>adm_filter=0 ==&gt; adm_filter=1</code><br>(mipsel)在脚本的29行:<code>adbyby_filter=0 ==&gt; adbyby_filter=1</code></p>
<h3 id="u91CD_u542F_u8DEF_u7531_u5668"><a href="#u91CD_u542F_u8DEF_u7531_u5668" class="headerlink" title="重启路由器"></a>重启路由器</h3><h2 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h2><blockquote>
<p><del>1.下次更新会添加mipsel支持</del></p>
<p><del>2.加入IPSET来控制过滤的网站和本地局域网设备过滤的网站控制</del></p>
</blockquote>
<h2 id="u63D2_u4EF6_u4E0B_u8F7D"><a href="#u63D2_u4EF6_u4E0B_u8F7D" class="headerlink" title="插件下载"></a>插件下载</h2><blockquote>
<p><a href="http://pan.baidu.com/s/1dDNAdXn" target="_blank" rel="external">armv7 packages</a> <strong>password:<code>pldi</code></strong><br><a href="http://pan.baidu.com/s/1mgYlk28" target="_blank" rel="external">mipsel packages</a> <strong>password:<code>i3q0</code></strong></p>
</blockquote>
<h2 id="u5F71_u54CD"><a href="#u5F71_u54CD" class="headerlink" title="影响"></a>影响</h2><p><u><strong>1.如果使用广告过滤将会导致QOS功能失效</strong></u><br><u><strong><del>2.偶尔也会造成卡网的现象</del></strong></u><br><u><strong>3.会造成80 port进出站的数据被过滤</strong></u></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u90E8_u7F72_u539F_u56E0"><a href="#u90E8_u7F72_u539F_u56E0" class="headerlink" title="部署原因"></a>部署原因</h2><p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/adm.jpg" alt=""></p>
<p>有同学会问我，为什么你突发奇想来弄广告过滤，呵呵！我真的不好意思说出口了(T＿T)! 最近我在看《太阳的什么鬼后裔》,每次看一集就来个一分多钟的广告，真的是受不了！有人直接说直接在浏览器或者电脑上安装得了，有必要弄得这么麻烦吗？Oh,shit! My world you do not know! 作为一名准程序员和GEEK必须得装一下逼ψ(｀∇´)ψ,不扯B了…..</p>]]>
    
    </summary>
    
      <category term="Tomato" scheme="http://www.router008.com/tags/Tomato/"/>
    
      <category term="路由器" scheme="http://www.router008.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="Tomato" scheme="http://www.router008.com/categories/Tomato/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shadowsocks Scripting Guide]]></title>
    <link href="http://www.router008.com/2016/02/14/ShadowSocks-Scripting-Guide/"/>
    <id>http://www.router008.com/2016/02/14/ShadowSocks-Scripting-Guide/</id>
    <published>2016-02-14T00:45:46.000Z</published>
    <updated>2016-07-02T08:15:20.034Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/wiki.gif" alt=""></p>
<a id="more"></a>
<h2 id="u90E8_u7F72_u6559_u7A0B"><a href="#u90E8_u7F72_u6559_u7A0B" class="headerlink" title="部署教程"></a>部署教程</h2><blockquote>
<p><a href="http://www.router008.com/2016/05/09/Tomato-ShadowSocks/">Tomato-ShadowSocks(armv7+mipsel)</a><br><a href="http://www.router008.com/2016/05/09/DD-WRT-ShadowSocks/">DD-WRT-ShadowSocks(armv7+?)</a></p>
</blockquote>
<h2 id="u811A_u672C_u53C2_u6570_u4ECB_u7ECD"><a href="#u811A_u672C_u53C2_u6570_u4ECB_u7ECD" class="headerlink" title="脚本参数介绍"></a>脚本参数介绍</h2><p><u><strong>此教程仅适用于VER:6.0以上的脚本</strong></u></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">set_up)</span><br><span class="line">    ShadowSocks自动安装部署</span><br><span class="line">    关联`START` `modules` `rules`</span><br><span class="line"></span><br><span class="line">modules)</span><br><span class="line">    加载使用IPSET所需要的模块</span><br><span class="line">    也可以独立运行，例如跟着路由器一起开机启动	</span><br><span class="line"></span><br><span class="line">START)</span><br><span class="line">    关联`set_up`起到安装部署过程中启动程序和更新IP列表的作用也可以独立运行，例如跟着路由器一起开机启动</span><br><span class="line">    关联`update_chnroutes` `update_gfwlist` `flush` `rules`</span><br><span class="line"></span><br><span class="line">rules)</span><br><span class="line">    加载各个方案所需要的iptables rules</span><br><span class="line">    也可以独立运行，例如跟着路由器一起开机启动</span><br><span class="line"></span><br><span class="line">adbyby|adm)</span><br><span class="line">    加载广告过滤规则</span><br><span class="line">    也可以独立运行，例如跟着路由器一起开机启动	</span><br><span class="line"></span><br><span class="line">global)</span><br><span class="line">    开启和关闭[2][3][4]方案的全局代理模式</span><br><span class="line">    关联`flush` `rules`</span><br><span class="line">    可以独立运行</span><br><span class="line"></span><br><span class="line">flush)</span><br><span class="line">    清空防iptanles之前加载的rules，恢复iptables默认</span><br><span class="line">    可以独立运行</span><br><span class="line"></span><br><span class="line">update)</span><br><span class="line">    [2][3][4]方案更新中国IP列表、Host、Routing</span><br><span class="line">    关联`flush` `rules`</span><br><span class="line">    可以独立运行	</span><br><span class="line"></span><br><span class="line">update_gfwlist)</span><br><span class="line">    [1]方案更新GFWLIST</span><br><span class="line">    可以独立运行	</span><br><span class="line"></span><br><span class="line">check)</span><br><span class="line">    守护各个方案的进程、防火墙规则</span><br><span class="line">    可以独立运行		</span><br><span class="line"></span><br><span class="line">ss_switch)</span><br><span class="line">    shadowsocks账号切换</span><br><span class="line">    多种模式账号切换:</span><br><span class="line">    [修改json文件] 主要用于各个不同[密码][加密方式][端口]</span><br><span class="line">    [修改IP] 主要用于相同[密码][加密方式][端口]</span><br><span class="line">    关联`run`</span><br><span class="line">    可以独立运行</span><br><span class="line"></span><br><span class="line">lan_control)</span><br><span class="line">    [2][3][4]方案的本地局域网设备使用代理控制</span><br><span class="line">    写入IP方式:</span><br><span class="line">    [自定义手动输入]</span><br><span class="line">    多种控制模式:</span><br><span class="line">    [转发列表内]</span><br><span class="line">    [忽略列表内]</span><br><span class="line">    可以独立运行	</span><br><span class="line"></span><br><span class="line">services_action)</span><br><span class="line">    关闭和开启代理</span><br><span class="line">    关联`flush` `rules`</span><br><span class="line">    可以独立运行</span><br><span class="line"></span><br><span class="line">update_scr)</span><br><span class="line">    更新脚本</span><br><span class="line">    多种模式:</span><br><span class="line">    [仅更新脚本] 主要用于脚本更新</span><br><span class="line">    可以独立运行   </span><br><span class="line"></span><br><span class="line">backup)</span><br><span class="line">    备份entware</span><br><span class="line">    执行可选</span><br><span class="line">    可以独立运行	</span><br><span class="line"></span><br><span class="line">*email)</span><br><span class="line">    邮件提醒</span><br><span class="line">    可以独立运行</span><br><span class="line"></span><br><span class="line">*temp) */XIAOMI R1D/*</span><br><span class="line">    风扇控制</span><br><span class="line">    可以独立运行</span><br><span class="line"></span><br><span class="line">*temp_s) */XIAOMI R1D/*</span><br><span class="line">    风扇开启夜间静音模式</span><br><span class="line">    可以独立运行</span><br></pre></td></tr></table></figure>
<h2 id="u90E8_u5206_u53C2_u6570_u4F7F_u7528"><a href="#u90E8_u5206_u53C2_u6570_u4F7F_u7528" class="headerlink" title="部分参数使用"></a>部分参数使用</h2><h3 id="global_u53C2_u6570_uFF08_u5168_u5C40_u6A21_u5F0F_u5207_u6362_uFF09"><a href="#global_u53C2_u6570_uFF08_u5168_u5C40_u6A21_u5F0F_u5207_u6362_uFF09" class="headerlink" title="global参数（全局模式切换）"></a>global参数（全局模式切换）</h3><h4 id="u5F00_u542F_u5168_u5C40_u6A21_u5F0F"><a href="#u5F00_u542F_u5168_u5C40_u6A21_u5F0F" class="headerlink" title="开启全局模式"></a>开启全局模式</h4><p>enter <code>shadowsocks -g start</code></p>
<h4 id="u5173_u95ED_u5168_u5C40_u6A21_u5F0F"><a href="#u5173_u95ED_u5168_u5C40_u6A21_u5F0F" class="headerlink" title="关闭全局模式"></a>关闭全局模式</h4><p>enter <code>shadowsocks -g stop</code></p>
<h3 id="adbyby_7Cadm_u53C2_u6570_uFF08_u5E7F_u544A_u8FC7_u6EE4_uFF09"><a href="#adbyby_7Cadm_u53C2_u6570_uFF08_u5E7F_u544A_u8FC7_u6EE4_uFF09" class="headerlink" title="adbyby|adm参数（广告过滤）"></a>adbyby|adm参数（广告过滤）</h3><h4 id="u5E7F_u544A_u8FC7_u6EE4_u8BBE_u5907_u63A7_u5236"><a href="#u5E7F_u544A_u8FC7_u6EE4_u8BBE_u5907_u63A7_u5236" class="headerlink" title="广告过滤设备控制"></a>广告过滤设备控制</h4><p>打开<code>/opt/etc/{adbyby|adm}</code>下的目录的文件进行ip写入</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式:</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.20</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.6</span></span><br><span class="line">····</span><br></pre></td></tr></table></figure>
<p>enter <code>shadowsocks -ad -l /opt/etc/{adbyby|adm}/lan_bp.list</code></p>
<h4 id="u6E05_u7406_u5E7F_u544A_u8FC7_u6EE4_u8BBE_u5907_u63A7_u5236IP"><a href="#u6E05_u7406_u5E7F_u544A_u8FC7_u6EE4_u8BBE_u5907_u63A7_u5236IP" class="headerlink" title="清理广告过滤设备控制IP"></a>清理广告过滤设备控制IP</h4><p>enter <code>shadowsocks -ad -c</code></p>
<h4 id="u5173_u95ED_u5E7F_u544A_u8FC7_u6EE4_u53CA_u5176_u6E05_u7406_u89C4_u5219"><a href="#u5173_u95ED_u5E7F_u544A_u8FC7_u6EE4_u53CA_u5176_u6E05_u7406_u89C4_u5219" class="headerlink" title="关闭广告过滤及其清理规则"></a>关闭广告过滤及其清理规则</h4><p>enter <code>shadowsocks -ad -f</code></p>
<h3 id="ss_switch_u53C2_u6570_uFF08_u8D26_u53F7_u5207_u6362_uFF09"><a href="#ss_switch_u53C2_u6570_uFF08_u8D26_u53F7_u5207_u6362_uFF09" class="headerlink" title="ss_switch参数（账号切换）"></a>ss_switch参数（账号切换）</h3><p>enter <code>shadowsocks -sw</code></p>
<p><strong>注意！</strong><br>1.选择修改<code>JSON</code>文件还是<code>server ip</code>(要是服务器不是相同端口和密码的得选择<code>JSON</code>，则反之！)，输入一些参数完毕后直接<code>回车</code>确定</p>
<h3 id="WAN_control_28_u5916_u7F51_u8BBE_u5907_u4EE3_u7406_u63A7_u5236_29"><a href="#WAN_control_28_u5916_u7F51_u8BBE_u5907_u4EE3_u7406_u63A7_u5236_29" class="headerlink" title="WAN_control(外网设备代理控制)"></a>WAN_control(外网设备代理控制)</h3><p><strong>注意！</strong><br>2.使用相关的SSH软件连接到路由器，打开<code>/opt/etc/shadowsocks/{WAN_AC_BP\WAN_AC_FW}</code>下的两个目录的文件进行ip写入,如果我们选择列表内不走代理,直接编辑<code>WAN_AC_BP</code>下的文件 &lt;—–手动写入ip的方法</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式:</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.20</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.6</span></span><br><span class="line">····</span><br></pre></td></tr></table></figure>
<ol>
<li>最后输入这段命令使其生效<code>shadowsocks -f &amp;&amp; shadowsocks -r</code></li>
</ol>
<h3 id="LAN_control_28_u5C40_u57DF_u7F51_u8BBE_u5907_u4EE3_u7406_u63A7_u5236_29"><a href="#LAN_control_28_u5C40_u57DF_u7F51_u8BBE_u5907_u4EE3_u7406_u63A7_u5236_29" class="headerlink" title="LAN_control(局域网设备代理控制)"></a>LAN_control(局域网设备代理控制)</h3><p>enter <code>shadowsocks -lc</code></p>
<p><strong>注意！</strong><br>1.如果选择<code>Allow list to proxy?</code>只允许列表内的设备走代理。列表外的则反之！<br>2.使用相关的SSH软件连接到路由器，打开<code>/opt/etc/shadowsocks/{LAN_AC_IN;LAN_AC_OUT}</code>下的两个目录的文件进行ip写入,如果我们选择列表内的走代理,直接编辑<code>LAN_AC_IN</code>下的文件 &lt;—–手动写入ip的方法</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式:</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.20</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.6</span></span><br><span class="line">····</span><br></pre></td></tr></table></figure>
<h3 id="services_action_u53C2_u6570_28_u4EE3_u7406_u7684_u5F00_u542F_u548C_u5173_u95ED_29"><a href="#services_action_u53C2_u6570_28_u4EE3_u7406_u7684_u5F00_u542F_u548C_u5173_u95ED_29" class="headerlink" title="services_action参数(代理的开启和关闭)"></a>services_action参数(代理的开启和关闭)</h3><h4 id="u505C_u6B62_u4EE3_u7406"><a href="#u505C_u6B62_u4EE3_u7406" class="headerlink" title="停止代理"></a>停止代理</h4><p>enter <code>shadowsocks -sa stop</code> </p>
<h4 id="u91CD_u65B0_u5F00_u542F_u4EE3_u7406"><a href="#u91CD_u65B0_u5F00_u542F_u4EE3_u7406" class="headerlink" title="重新开启代理"></a>重新开启代理</h4><p>enter <code>shadowsocks -sa start</code> </p>
<h3 id="mail_u53C2_u6570_28_u90AE_u4EF6_u63D0_u9192_29"><a href="#mail_u53C2_u6570_28_u90AE_u4EF6_u63D0_u9192_29" class="headerlink" title="mail参数(邮件提醒)"></a>mail参数(邮件提醒)</h3><p>enter <code>shadowsocks -e</code></p>
<p>直接在脚本的开头进行设置，然后自行加入到计划任务中！</p>
<h3 id="temp_u548Ctemp_s_u53C2_u6570_28_u5C0F_u7C73_u8DEF_u7531_u5668_u591C_u95F4_u98CE_u6247_u81EA_u52A8_u9759_u97F3_29"><a href="#temp_u548Ctemp_s_u53C2_u6570_28_u5C0F_u7C73_u8DEF_u7531_u5668_u591C_u95F4_u98CE_u6247_u81EA_u52A8_u9759_u97F3_29" class="headerlink" title="temp和temp_s参数(小米路由器夜间风扇自动静音)"></a>temp和temp_s参数(小米路由器夜间风扇自动静音)</h3><p>enter <code>shadowsocks -t/-ts</code></p>
<p>第一次配置脚本的时候直接在脚本开头启动该功能<br><code>xiaomi_fan=1</code></p>
<h2 id="u811A_u672C_u66F4_u65B0"><a href="#u811A_u672C_u66F4_u65B0" class="headerlink" title="脚本更新"></a>脚本更新</h2><p><u>6.0版本的脚本由于作了较大幅度的修改需要重新部署</u></p>
<p><font color="red">note:</font>(&gt;5.0 version)</p>
<p><strong>注意！这个功能必须使用绝对路径来运行</strong><br>enter <code>/mnt/sdax/shadowsocks/shadowsocks -us</code> 它会提示你是否<code>CHNROUTES</code>还是<code>GFWLIST</code>,我们这里是以<code>CHNROUTES</code><strong>(除了方案一外其他的方案都是<code>CHNROUTES</code>)</strong>所以选择<code>y</code>,然后会再次提示‘ss-redir?’<strong>(ss-redir是方案2.3.4)</strong>这里我们以<strong>ss-redir</strong>来操作，选择<code>y</code>=&gt;整个升级就完成了！</p>
<h2 id="u7B80_u5355_u6545_u969C_u68C0_u67E5"><a href="#u7B80_u5355_u6545_u969C_u68C0_u67E5" class="headerlink" title="简单故障检查"></a>简单故障检查</h2><blockquote>
<p>1.如果出现无法使用代理但国内网站访问正常的情况</p>
</blockquote>
<p><strong>第一、</strong>你先要检查这些插件的进程是否正常(插件的进程取决于你选择的方案)<br>enter <code>ps</code></p>
<p><strong>第二、</strong>查看IPSET是否正确加载这些IP段和ignore.list是否完整(<code>/opt/etc/ignore.list</code>)<br>enter <code>ipset -L</code></p>
<p><strong>第三、</strong>查看iptables是否正确加载成功<br>enter <code>iptables -t nat -L</code></p>
<p><strong>第四、</strong>使用nslookup命令来查看是否被污染了<br>enter <code>nslookup www.youtube.com</code></p>
<p><strong>第五、</strong>账号是否正常</p>
<blockquote>
<p>2.如果出现能使用代理但国内网站访问却走代理或者是全局的情况</p>
</blockquote>
<p>查看IPSET是否正确加载这些IP段和ignore.list是否完整(<code>/opt/etc/ignore.list</code>)<br>enter <code>ipset -L</code></p>
<blockquote>
<p>3.如果出现能使用代理但国内网站访问不了的情况<br>到你安装脚本的目录(<code>EP:/jffs/shadowsocks/dnsmasq.d/accelerated-domains.china.conf</code>)<br>查看这个文件是否存在，还有格式是否正确！<br>正确的格式显示如下：<br>server=/0-gold.net/{你本地的DNS地址}<br>如果本地的DNS地址这一栏没有是留空的，运行以下命令修复:<br>enter<code>shadowsocks -u</code>(这是选择除方案一的以外的方案执行)<br>enter<code>shadowsocks -ug</code>(方案一的方案执行)</p>
</blockquote>
<p><strong><font color="blue">如果遇上以上的的情况，如果可以自己解决的更好，不会的可以根据以上的方法排查然后发送有用的信息给我协助你们解决！</font></strong></p>
<h2 id="u65E7_u7248_u672C_u7248_u672C_u6587_u6863_u4E0B_u8F7D_285-0_29"><a href="#u65E7_u7248_u672C_u7248_u672C_u6587_u6863_u4E0B_u8F7D_285-0_29" class="headerlink" title="旧版本版本文档下载(5.0)"></a>旧版本版本文档下载(5.0)</h2><blockquote>
<p><a href="http://pan.baidu.com/s/1gfazpth" target="_blank" rel="external">Tomato-shadowsocks Scripting Guide</a> <strong>密码:<code>fznh</code></strong></p>
</blockquote>
<h2 id="ISSUES"><a href="#ISSUES" class="headerlink" title="ISSUES"></a>ISSUES</h2><blockquote>
<p>1.方案3不能跟tomato中的muitiwan功能共存使用<br><del>2.由于tomato中内置IPSET不具有<code>nomatch</code> flag 所以无法使用iptables来配合IPSET控制WAN_AC_IP的是否走代理</del><br>3.方案4中的<code>Pcap_DNSProxy</code>还在完善过程中并且是个资源大户，建议有能力的同学使用<br>……</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/wiki.gif" alt=""></p>]]>
    
    </summary>
    
      <category term="Tomato" scheme="http://www.router008.com/tags/Tomato/"/>
    
      <category term="路由器" scheme="http://www.router008.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="Tomato" scheme="http://www.router008.com/categories/Tomato/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenWRT Guide]]></title>
    <link href="http://www.router008.com/2016/02/05/OpenWRT-Guide/"/>
    <id>http://www.router008.com/2016/02/05/OpenWRT-Guide/</id>
    <published>2016-02-05T13:20:36.000Z</published>
    <updated>2016-05-09T13:37:04.496Z</updated>
    <content type="html"><![CDATA[<p><img src="https://openwrt.org/.styles/img/openwrt-logo.png" alt=""></p>
<a id="more"></a>
<h2 id="u914D_u7F6E_u7F16_u8BD1_u73AF_u5883"><a href="#u914D_u7F6E_u7F16_u8BD1_u73AF_u5883" class="headerlink" title="配置编译环境"></a>配置编译环境</h2><p>必须使用<strong>非root用户</strong>，ArchLinux需要创建新用户。</p>
<h3 id="u5B89_u88C5_u4F9D_u8D56_u5305"><a href="#u5B89_u88C5_u4F9D_u8D56_u5305" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><pre><code>// Ubuntu 14.04 必选
# apt-get install asciidoc bash bc binutils bzip2 fastjar flex git-core g++ build-essential util-linux gawk libgtk2.0-dev intltool jikespg zlib1g-dev genisoimage libncurses5-dev libssl-dev patch perl-modules python2.7-dev rsync ruby sdcc unzip wget gettext xsltproc libboost1.55-dev libboost1.55-tools-dev libxml-parser-perl libusb-dev bin86 bcc bzr ecj sharutils openjdk-7-jdk zip gcc-multilib quilt
// Ubuntu 14.04 可选
# apt-get install subversion mercurial cvs
// ArchLinux 必选
# pacman -S base-devel
# pacman -S [--needed] asciidoc b43-fwcutter bash bc bin86 boost binutils bzip2 cdrkit fastjar flex gawk gettext git gtk2 intltool jdk7-openjdk libusb libxslt ncurses openssl patch perl python2 rsync ruby sdcc sharutils unzip util-linux wget zlib gcc make perl-extutils-makemaker findutils libstdc++5 lib32-libstdc++5
// libstdc++  可能需要版本6,待测
// 根据wiki，ArchLinux部分必选包在AUR里面
// 从 2015-12-11 开始，bcc和jikes貌似从AUR里消失了，可能是 C++ ABI 更新的缘故，不安装这两个貌似也可以
$ yaourt -S bcc jikes
// ArchLinux 可选
# pacman -S subversion
</code></pre><h3 id="u9996_u6B21_u914D_u7F6E_u9700_u8981_u68C0_u51FA_u6E90_u4EE3_u7801_uFF0C_u8FD9_u91CC_u7528subversion_u68C0_u51FA_u5F00_u53D1trunk_u5206_u652F"><a href="#u9996_u6B21_u914D_u7F6E_u9700_u8981_u68C0_u51FA_u6E90_u4EE3_u7801_uFF0C_u8FD9_u91CC_u7528subversion_u68C0_u51FA_u5F00_u53D1trunk_u5206_u652F" class="headerlink" title="首次配置需要检出源代码，这里用subversion检出开发trunk分支"></a>首次配置需要检出源代码，这里用subversion检出开发trunk分支</h3><pre><code>$ svn co svn://svn.openwrt.org/openwrt/trunk/
</code></pre><p>这时，就会出现名为<code>trunk</code>的文件夹，这就是将来我们的工作目录。<br>如果已经有了以前的版本库，需要按照下面的命令更新</p>
<pre><code>// 必须进入工作目录才能更新
$ cd trunk/
$ svn update
</code></pre><h3 id="u66F4_u65B0_u548C_u5B89_u88C5feeds_uFF08_u9700_u8981VPN_uFF09"><a href="#u66F4_u65B0_u548C_u5B89_u88C5feeds_uFF08_u9700_u8981VPN_uFF09" class="headerlink" title="更新和安装feeds（需要VPN）"></a>更新和安装feeds（需要VPN）</h3><p>在下载之前可以通过查看<code>feeds.conf.default</code>文件，来检查哪些文件需要包含在环境中。更新只需要重复命令即可</p>
<pre><code>$ cd trunk/
$ ./scripts/feeds update -a
$ ./scripts/feeds install -a
</code></pre><h3 id="u914D_u7F6E_u7F16_u8BD1_u4FE1_u606F"><a href="#u914D_u7F6E_u7F16_u8BD1_u4FE1_u606F" class="headerlink" title="配置编译信息"></a>配置编译信息</h3><p>必须先选择好目标（target）类型才能执行 <code>make defconfig</code></p>
<pre><code>$ make defconfig
$ make prereq
$ make menuconfig
</code></pre><p>其中斜线（/）可以进行搜索。<br>刚开始可以考虑选择编译SDK用于开发，编译ImageGenerator（a.k.a ImageBuilder）简单打包自己需要的Package和配置文件进入固件中，也可以同时打包好工具链（ToolChain）方便以后使用，这样的话时间会稍微长一些。  </p>
<h2 id="u5F00_u59CB_u7F16_u8BD1"><a href="#u5F00_u59CB_u7F16_u8BD1" class="headerlink" title="开始编译"></a>开始编译</h2><p>一般情况，进行全部编译时使用一个简单的命令，因为编译过程会下载很多文件，目前许多项目的repo都迁移到GitHub上了，一般情况下不必使用VPN，但是如果网络条件很差，可以考虑使用一个靠谱的VPN服务提供商。</p>
<pre><code>$ make V=99
</code></pre><p>编译一个单独的软件包（例如cups软件包）</p>
<pre><code>$ make package/cups/compile V=99
</code></pre><p>如果特殊原因需要分析编译报错信息：</p>
<pre><code>$ make V=99 2&gt;&amp;1 |tee build.log |grep -i error
</code></pre><p>则将编译的所有输出信息保存在<code>build.log</code>中，将error信息打印在屏幕上。</p>
<p>还发现一个记录log的好办法，打开<code>make menuconfig</code>里面的Advanced configuration options (for developers)，接着开启Enable log files during build process，这样在使用<code>make V=99</code>的时候自动会生成logs文件夹，里面详细记录了各个阶段的日志文件，相比上述输出日志的形式，这种更加全面，实际使用过程发现好像反应稍微慢了点，不过没有错误才是最好的，不是么？</p>
<h3 id="u7F16_u8BD1_u7ED3_u675F"><a href="#u7F16_u8BD1_u7ED3_u675F" class="headerlink" title="编译结束"></a>编译结束</h3><p>编译结束后，所有的文件都会放在编译根目录下的 bin/yourtarget/ ，例如 /bin/ar71xx</p>
<pre><code>$ ls bin/*
</code></pre><p>编译之后的文件主要有以下几类：</p>
<ol>
<li>bin/.trx 文件: 路由器固件。如果没有另外一种也不必惊慌。关于.bin和.trx的区别，一种说法是，第一次刷路由器的时候，需要用.bin文件，如果需要再升级，则不能再使用 .bin文件，而需要用 .trx文件。原因是 .bin是将路由器的相关配置信息和 .trx封装在一起而生成的封包，也就是说是包含路由器版本信息的 .trx 在第一次刷固件的时候，我们需要提供这样的信息，而在后续升级时则不再需要，用 .trx文件即可。</li>
<li>packages文件夹: 里面包含了我们在配置文件里设定的所有编译好的软件包。</li>
<li>（可选）OpenWrt-SDK.**.tar.bz2: 这个也就是我们定制编译好的OpenWRT SDK环境。我们将用这个来进行OpenWrt软件包的开发。我的 TP-Link WR841N v7 编译的SDK文件名是<code>OpenWrt-SDK-ar71xx-for-linux-x86_64-gcc-4.8-linaro_uClibc-0.9.33.2.tar.bz2</code></li>
<li>（可选）OpenWrt-ImageBuilder-**.tar.bz2: 这个可以简单打包自己需要的Package和配置文件进入固件中。我的文件名为<code>OpenWrt-ImageBuilder-ar71xx_generic-for-linux-x86_64.tar.bz2</code></li>
<li>（可选）OpenWrt-Toolchain-**.tar.bz2: 这个是交叉编译工具链。我的是<code>OpenWrt-Toolchain-ar71xx-for-mips_34kc-gcc-4.8-linaro_uClibc-0.9.33.2.tar.bz2</code></li>
<li>md5sums 文件: 这个文件记录了所有我们编译好的文件的MD5值，来保证文件的完整性。</li>
</ol>
<p>编译完成后，一定要将<strong>编译好的bin目录进行备份</strong></p>
<h2 id="u6E05_u7406_u4EE5_u53CA_u518D_u7F16_u8BD1"><a href="#u6E05_u7406_u4EE5_u53CA_u518D_u7F16_u8BD1" class="headerlink" title="清理以及再编译"></a>清理以及再编译</h2><p>建议现在清理编译产生的文件，以免下次编译时造成冲突，也就是每次编译完成之后把需要的东西复制到别处，然后立即清理（因为要生成的文件如果存在的话，可能不会被替换），执行<code>make clean</code>  </p>
<p>注意：在执行clean命令，确保已经将编译好的Image进行了备份。清理工作会清除bin目录。</p>
<pre><code>$ make clean
</code></pre><p>除了清除生成的目录，还想清除交叉编译工具（以及工具链目录）</p>
<pre><code>$ make dirclean
</code></pre><p>清除所有相关的东西，包括下载的软件包，配置文件，feed内容等（不建议使用）</p>
<pre><code>$ make distclean
</code></pre><p>对于更新feeds后出现的错误：ERROR:please fix package/feeds/packages/mc/Makefile 等类似的问题，需要执行这条语句进行系统的清理</p>
<p>对于清理组件，比如软件包的清理</p>
<p>比如清理 linux</p>
<pre><code>$ make target/linux/clean
</code></pre><p>清理 base-files 软件包</p>
<pre><code>$ make package/base-files/clean
</code></pre><p>清理 Luci</p>
<pre><code>$ make package/luci/clean
</code></pre><h2 id="u548C_u5B98_u65B9_u4ED3_u5E93_u4FDD_u6301_u540C_u6B65"><a href="#u548C_u5B98_u65B9_u4ED3_u5E93_u4FDD_u6301_u540C_u6B65" class="headerlink" title="和官方仓库保持同步"></a>和官方仓库保持同步</h2><p>很多时候，我们在自己的某个Repository里面进行修改或者开发操作，所以要保证我们的代码与官方的代码保持同步。</p>
<p>官方仓库的地址是 <code>git://git.openwrt.org/openwrt.git</code> 或者 <code>http://git.openwrt.org/openwrt.git</code>。其他在GitHub上的仓库貌似都是镜像，比如<a href="https://github.com/openwrt-es/openwrt" target="_blank" rel="external">openwrt-es</a>以及<a href="https://github.com/openwrt-mirror/openwrt" target="_blank" rel="external">openwrt-mirror</a>。</p>
<p>如果还没进行过多少修改的代码，可以直接fork给出的repo，然后可以方便的使用github本身看我们的分支和官方的代码有多少的超前和滞后提交，可以作为一个提醒。</p>
<p>接下来，我们建立一个远程仓库名为<code>upstream</code>：</p>
<pre><code>$ git remote -v   // 首先列出远程仓库，一般只有一个origin

$ git remote add upstream http://git.openwrt.org/openwrt.git
</code></pre><p>这样就建立好了，我们可以接着列出远程仓库看一下.如果需要变更或者删除远程仓库的话，请参考git remote的manpage.</p>
<p>有的人喜欢使用<code>git pull</code>，但是官方推荐的是使用fetch然后merge，这样有什么区别还有冲突都一目了然.</p>
<pre><code>$ git fetch upstream master   // 从官方拉下来最新代码，一般只取得master就行了，其他分支根据需求选择

$ git checkout master   // 切换到主分支，或者是切换到你需要merge到的分支

$ git merge upstream/master // 自动merge进上面切换到的分支中，可以自动或者手动解决冲突
</code></pre><p>这种方法进行的是三方合并，每次都会产生一个合并的commit，看一下git log顿时瞎眼，对于强迫症而言怎么能忍？</p>
<p>另外一种单线git log的方式，适用于各种强迫症患者：</p>
<p>既然是单线方式，最有可能的也就是<code>git-rebase</code>了，基本思路是本地建立一个upstream分支，跟踪上游的变化，只使用<code>git-fetch</code>拉取上游，定期在本地master上进行rebase.</p>
<pre><code>$ git fetch upstream master  // 继续拉取上游最新commit

$ git checkout -b upstream upstream/master  //以 upstream/master 为分界点取出一个名为upstream的分支

$ git checkout master // 切换到主分支

$ git rebase -i upstream // 将 upstream 分支rebase进本地的主分支

$ git branch -d upstream // 最后可以删除upstream分支，如果没有完全rebase进来的话是不会让你删除这个分支的
</code></pre><p>当然git-rebase我也用不好，如果发现方法不对或者有更好办法欢迎PR</p>
<p>这样，我们就能时刻和官方保持一致了.</p>
<h2 id="OpenWRT__u7F16_u8BD1_doc__u6587_u4EF6"><a href="#OpenWRT__u7F16_u8BD1_doc__u6587_u4EF6" class="headerlink" title="OpenWRT 编译 doc 文件"></a>OpenWRT 编译 doc 文件</h2><p>在 OpenWrt 的 trunk 分支中有一个文件夹名为 <code>doc</code>，在这个文件夹中包含一部分文档可供参考，是用 LaTeX 写的，我们需要编译之后才能阅读的更顺畅，编译之后默认生成 .pdf 和 .htm 文件。</p>
<p>在 Ubuntu 我们可以使用 apt-get 从网络上直接下载包来安装。</p>
<p>我们用到的三个比较重要的命令有 <code>apt-cache search</code> 、<code>apt-cache show</code> 和 <code>sudo apt-get install</code> </p>
<p>首先使用</p>
<pre><code>$ apt-cache search latex
</code></pre><p>我们可以看到许多包被列出。选择安装<code>texlive-latex-base</code>, 它的描述是：Tex Live: Basic LaTex packages</p>
<pre><code>sudo apt-get install texlive-latex-base
</code></pre><p>这样就安装好Latex了，可以直接使用。 但编译中文时，由于没有安装CJK中文环境，会提示找不到CJK包。</p>
<pre><code>$ apt-cache search cjk
</code></pre><p>选择安装<code>latex-cjk-all</code>, 它的描述是：Installs all LaTex CJK packages.</p>
<pre><code>sudo apt-get install latex-cjk-all 
</code></pre><p>这样就可以使用中文环境了。 </p>
<p>有些.sty文件可能没有安装，例如：lastpage.sty. 这个时候不要到网络上去询问是因为什么， Latex的输出错误信息已经很明显了。<br>使用下面的命令来查找相应的包。  <strong>注意不要加.sty文件后缀</strong></p>
<pre><code>$ apt-cache search lastpage
</code></pre><p>可以看到需要下面的包，以及对这个包的描述：texlive-latex-extra - TeX Live: LaTeX supplementary packages  选择安装即可：</p>
<pre><code>sudo apt-get install texlive-latex-extra
</code></pre><p>完成上面的这三步，就可以基本满足平时的应用需求了。如果以后需要使用新的包，可以使用上面的方法来查找相应的安装包，并选择安装即可。</p>
<h2 id="u589E_u52A0_u8BBE_u5907_u652F_u6301"><a href="#u589E_u52A0_u8BBE_u5907_u652F_u6301" class="headerlink" title="增加设备支持"></a>增加设备支持</h2><h5 id="u524D_u63D0"><a href="#u524D_u63D0" class="headerlink" title="前提"></a>前提</h5><p>如果是专业搞过嵌入式开发的，懂得架构以及其他必要知识的可以忽略这个前提，接下来就是我要说的了，找一款和你想要添加的设备<strong>很相近</strong>且官方已经有了支持的型号，至少要是相同的平台，比如ar71xx.这部分基本上围绕这个前提来展开。</p>
<h5 id="u6240_u9700"><a href="#u6240_u9700" class="headerlink" title="所需"></a>所需</h5><p>完整 OpenWrt 开发环境. 包括编辑器, 配置好的 <code>quilt</code> 工具.</p>
<p>假设之前已经编译过 bin, 有<strong>完整的 .config 和 toolchain</strong>.</p>
<p>目前看到的很多教程教人直接修改现有的 patch 文件或者是 tmp/ 文件夹下的文件，更甚者胡乱猜测，这样会导致一些问题。</p>
<p>比如源码更新的时候，许多 Patch 文件的偏移（offset）会发生变更，主要体现在 linux 内核版本升级的时候，这样直接修改现成的 Patch 就会增添许多烦恼，其实官方有一个很好的东东，那就是这个 quilt，它是用来管理代码树中的 patch 的嵌入式内核开发利器!</p>
<h5 id="u589E_u52A0_Device-Specific__u652F_u6301_u6587_u4EF6"><a href="#u589E_u52A0_Device-Specific__u652F_u6301_u6587_u4EF6" class="headerlink" title="增加 Device-Specific 支持文件"></a>增加 Device-Specific 支持文件</h5><p>这个部分的文件是单独的，与其他的文件比如各种 Patch 没有较大的关联，在重新编译之前只需要<code>make clean</code>就行。</p>
<p>我们以添加 TP-Link TL-WR2041N v1 版本为例子进行说明：</p>
<p>新手刚开始添加支持的时候最好在取出最新的 trunk 代码之后立即进行，防止其他文件干扰，如果之前做过类似的操作或者懂得目录结构、知道文件是做什么用的，可以忽略这个建议。</p>
<p><strong>删除 tmp/ 目录</strong>，这个是大坑，因为这个文件夹内的内容全是生成的，没必要进行更改。</p>
<pre><code>$ rm -rvf tmp/
</code></pre><p>首先，如同前文所述，确定好相近的型号，方便添加支持。我这个型号的板子与国外的 WDR3500 相似，与国内的 TP-Link TL-WR941N v6 相同，我是通过 WDR3500 进行添加的。</p>
<p>搜索以下相关的文件，以确定需要修改什么文件，之后照猫画虎。</p>
<p>运行 <code>grep wdr3500 trunk/* -r -l</code> 得到的结果如下，我已经做好了分类：</p>
<pre><code>// 这部分是Device-Specific的
trunk/target/linux/ar71xx/base-files/etc/diag.sh
trunk/target/linux/ar71xx/base-files/etc/uci-defaults/01_leds
trunk/target/linux/ar71xx/base-files/etc/uci-defaults/02_network
trunk/target/linux/ar71xx/base-files/lib/upgrade/platform.sh
trunk/target/linux/ar71xx/base-files/lib/ar71xx.sh
trunk/target/linux/ar71xx/files/arch/mips/ath79/mach-tl-wdr3500.c
// 这部分是制作镜像的相关文件
trunk/target/linux/ar71xx/image/Makefile
trunk/target/linux/ar71xx/generic/profiles/tp-link.mk
trunk/tools/firmware-utils/src/mktplinkfw.c
// 这部分是内核支持相关的文件
trunk/target/linux/ar71xx/config-3.10
trunk/target/linux/ar71xx/patches-3.10/610-MIPS-ath79-openwrt-machines.patch
</code></pre><p>得到的文件就是基本的支持文件了，我们一个一个说。</p>
<h5 id="diag-sh"><a href="#diag-sh" class="headerlink" title="diag.sh"></a>diag.sh</h5><p>这个文件是 openwrt 初始化时闪烁的灯的配置，一般的路由启动的时候只闪烁 System 灯或者电源灯，基本没有修改的价值，仿照修改即可。</p>
<p>比如2041n v1：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tl-wdr3500 | \</span><br><span class="line">tl-wr2041n-v1 | \</span><br><span class="line">........</span><br><span class="line">tl-wr941nd)</span><br><span class="line">truestatus_led=<span class="string">"tp-link:green:system"</span></span><br></pre></td></tr></table></figure></p>
<p>添加到该位置就行。</p>
<h5 id="uci-defaults/01_leds"><a href="#uci-defaults/01_leds" class="headerlink" title="uci-defaults/01_leds"></a>uci-defaults/01_leds</h5><p>这个文件是定义 led 的信息的，简单的比如 <code>ucidef_set_led_netdev</code> 多用于定义 WAN 口，修改最后的 eth0 为你对应的设备名称； <code>ucidef_set_led_wlan</code> 多用于定义 WLAN 口，最后的 <code>phyxtpt</code> 目前见到的只有 x=0 和1两种情况，这个和设备初始出来的phy物理设备相关； <code>ucidef_set_led_switch</code> 用来定义交换机的配置，最后的 0x00 部分是端口掩码，一般的顺序如下。</p>
<p>至于更详细的定义过程，需要参考 <code>packages/base-files/files/lib/functions</code> 目录的 <code>uci-defaults.sh</code> 脚本。（目前新加的文件 <code>uci-defaults-new.sh</code> 文件，看样子是通过 JSON 传值的，应该是应用于新的设备或者新的架构的）</p>
<p>比如2041n v1：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tl-wr2041n-v1)</span><br><span class="line">trueucidef_<span class="built_in">set</span>_led_netdev <span class="string">"wan"</span> <span class="string">"WAN"</span> <span class="string">"tp-link:green:wan"</span> <span class="string">"eth0"</span></span><br><span class="line">trueucidef_<span class="built_in">set</span>_led_switch <span class="string">"lan1"</span> <span class="string">"LAN1"</span> <span class="string">"tp-link:green:lan1"</span> <span class="string">"switch0"</span> <span class="string">"0x02"</span></span><br><span class="line">trueucidef_<span class="built_in">set</span>_led_switch <span class="string">"lan2"</span> <span class="string">"LAN2"</span> <span class="string">"tp-link:green:lan2"</span> <span class="string">"switch0"</span> <span class="string">"0x04"</span></span><br><span class="line">trueucidef_<span class="built_in">set</span>_led_switch <span class="string">"lan3"</span> <span class="string">"LAN3"</span> <span class="string">"tp-link:green:lan3"</span> <span class="string">"switch0"</span> <span class="string">"0x08"</span></span><br><span class="line">trueucidef_<span class="built_in">set</span>_led_switch <span class="string">"lan4"</span> <span class="string">"LAN4"</span> <span class="string">"tp-link:green:lan4"</span> <span class="string">"switch0"</span> <span class="string">"0x10"</span></span><br><span class="line">trueucidef_<span class="built_in">set</span>_led_netdev <span class="string">"wlan"</span> <span class="string">"WLAN"</span> <span class="string">"tp-link:green:wlan"</span> <span class="string">"wlan0"</span></span><br><span class="line">trueucidef_<span class="built_in">set</span>_led_wlan <span class="string">"wlan"</span> <span class="string">"WLAN"</span> <span class="string">"tp-link:green:wlan"</span> <span class="string">"phy1tpt"</span></span><br><span class="line">true;;</span><br></pre></td></tr></table></figure></p>
<h5 id="uci-defaults/02_network"><a href="#uci-defaults/02_network" class="headerlink" title="uci-defaults/02_network"></a>uci-defaults/02_network</h5><p>该文件定义初始化网络信息，主要是交换机和 vlan，<del>不过我遇到怪异的事情是，<code>ucidef_set_interfaces_lan_wan</code> 紧跟着的第一个参数是定义 wan 的，第二个是定义 lan 的，比如下面的 eth0 是 wan 而 eth1 是 lan 。</del>（貌似是在设备 mach 文件中定义的问题，看了一下网络初始化的脚本 <code>uci-defaults.sh</code> 中的定义，应该第一个参数是 lan ,第二个是 wan）<br>比如 wr2041n v1：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tl-wr2041n-v1)</span><br><span class="line">trueucidef_<span class="built_in">set</span>_interfaces_lan_wan <span class="string">"eth0"</span> <span class="string">"eth1"</span></span><br><span class="line">trueucidef_add_switch <span class="string">"switch0"</span> <span class="string">"1"</span> <span class="string">"1"</span></span><br><span class="line">trueucidef_add_switch_vlan <span class="string">"switch0"</span> <span class="string">"1"</span> <span class="string">"0 1 2 3 4"</span></span><br><span class="line">true;;</span><br></pre></td></tr></table></figure></p>
<h5 id="uci-defaults_u7684_u8BF4_u660E"><a href="#uci-defaults_u7684_u8BF4_u660E" class="headerlink" title="uci-defaults的说明"></a>uci-defaults的说明</h5><p>从 <a href="https://github.com/openwrt/openwrt/commit/dd300dc979eb65b189656b34e8b2cfaeba0f6afb" target="_blank" rel="external">https://github.com/openwrt/openwrt/commit/dd300dc979eb65b189656b34e8b2cfaeba0f6afb</a> 以及之前的一些commit来看，官方使用原来的 uci-defaults-new.sh代替了uci-defaults.sh，主要影响的应该就是02_network的添加了，而且目前是统一放在 <code>/etc/board.d</code>里作为原来的<code>/etc/uci-defaults</code>. 对于switch部分，基本构成是”数字|@或者:|数字”，用”@”的应该是cpu port和switch口相连的，用”:”的应该是写vlan的，写在最前面的数字（@和:前）是对应设备lan wan插口，书写顺序可能是按照switch端口从0开始递增，先写lan部分再写wan部分。官方目前还没写注释，新写法依然存在困惑。<br>对于 wr2041n v1：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tl-wr2041n-v1)</span><br><span class="line">trueucidef_<span class="built_in">set</span>_interfaces_lan_wan <span class="string">"eth0"</span> <span class="string">"eth1"</span></span><br><span class="line">trueucidef_add_switch <span class="string">"switch0"</span> \</span><br><span class="line">truetrue<span class="string">"0@eth0"</span> <span class="string">"1:lan:4"</span> <span class="string">"2:lan:3"</span> <span class="string">"3:lan:2"</span> <span class="string">"4:lan:1"</span></span><br><span class="line">true;;</span><br></pre></td></tr></table></figure></p>
<h5 id="lib/upgrade/platform-sh"><a href="#lib/upgrade/platform-sh" class="headerlink" title="lib/upgrade/platform.sh"></a>lib/upgrade/platform.sh</h5><p>该文件是定义系统更新时验证的，基本上不用怎么更改。</p>
<p>比如 2041n v1：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tl-wdr3500 | \</span><br><span class="line">tl-wr2041n-v1 | \</span><br></pre></td></tr></table></figure></p>
<p>添加到了wdr3500的下方。</p>
<h5 id="lib/ar71xx-sh"><a href="#lib/ar71xx-sh" class="headerlink" title="lib/ar71xx.sh"></a>lib/ar71xx.sh</h5><p>第一个是硬件 magic number，可以用 WinHex 打开固件文件，查看对应的偏移即可找到，model 定义的是显示的设备名称，下面的 <code>*&quot;TL-WR2041N v1&quot;</code> 要对应设备支持的 mach C语言设备文件中定义好的名称；同样的， name 定义的是内部传递的值，最好与上面添加的行一致。简单来说，涉及到型号名称的最好都保持一致。</p>
<p>比如 2041n v1：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">       <span class="string">"204100"</span>*)</span><br><span class="line">truemodel=<span class="string">"TP-Link TL-WR2041N"</span></span><br><span class="line">true;;</span><br><span class="line"></span><br><span class="line">*<span class="string">"TL-WR2041N v1"</span>)</span><br><span class="line">truename=<span class="string">"tl-wr2041n-v1"</span></span><br><span class="line">true;;</span><br></pre></td></tr></table></figure></p>
<h5 id="files/arch/mips/ath79/mach-tl-wdr3500-c"><a href="#files/arch/mips/ath79/mach-tl-wdr3500-c" class="headerlink" title="files/arch/mips/ath79/mach-tl-wdr3500.c"></a>files/arch/mips/ath79/mach-tl-wdr3500.c</h5><p>这个就是很重要的设备支持 C语言文件了，开头的前缀 mach 最好保留，mach后的名称需要与以后添加的linux patch支持名称保持一致。</p>
<p>一般用于定义 led、flash 以及 PHY4 等等涉及到的端口信息，有的mach文件还涉及到 ART 的偏移量（offset），ART是存储无线数据的分区，如果设置不当会导致路由没有无线。</p>
<p>为了最快的添加路由支持，可以采用sed, awk工具批量改名的方法，写出一个设备支持文件来，当然也可以使用 vim, emacs批量完成。</p>
<p>比如 2041n v1：<br>新建文件 target/linux/ar71xx/files/arch/mips/ath79/mach-tl-wr2041n-v1.c，详情请<a href="https://github.com/wongsyrone/openwrt-1/blob/master/target/linux/ar71xx/files/arch/mips/ath79/mach-tl-wr2041n-v1.c" target="_blank" rel="external">戳这里</a></p>
<p>值得注意的是：<br><code>MIPS_MACHINE(ATH79_MACH_TL_WR2041N_V1, &quot;TL-WR2041N-v1&quot;, &quot;TP-LINK TL-WR2041N v1&quot;, wr2041n_setup);</code><br>第一部分要与 <code>config-3.10</code> 文件中添加的内容以及后面添加的linux kernel patch中的内容一致；<code>&quot;TL-WR2041N-v1&quot;</code> 是定义的设备名称，最好与 image 的 Makefile一致；”TP-LINK TL-WR2041N v1” 与前面涉及到的 <code>lib/ar71xx.sh</code> 文件相关；最后的 <code>wr2041n_setup</code> 是设备初始化的主函数名称。</p>
<h4 id="u955C_u50CF_u751F_u6210_u7684_u76F8_u5173_u6587_u4EF6"><a href="#u955C_u50CF_u751F_u6210_u7684_u76F8_u5173_u6587_u4EF6" class="headerlink" title="镜像生成的相关文件"></a>镜像生成的相关文件</h4><h5 id="trunk/target/linux/ar71xx/image/Makefile"><a href="#trunk/target/linux/ar71xx/image/Makefile" class="headerlink" title="trunk/target/linux/ar71xx/image/Makefile"></a>trunk/target/linux/ar71xx/image/Makefile</h5><p>该文件主要修改如下两行，剩下的内容需要仔细学习 Makefile的写法才能看懂。</p>
<pre><code>$(eval $(call MultiProfile,TLWR2041,TLWR2041NV1))
</code></pre><p>该行定义多Profile，一般是一个型号生成多个硬件版本支持的定义</p>
<pre><code>$(eval $(call SingleProfile,TPLINK-LZMA,64kraw,TLWR2041NV1,tl-wr2041n-v1,TL-WR2041N-v1,ttyS0,115200,0x20410001,1,4Mlzma))
</code></pre><p>该行是单独设备的支持信息，第一个参数是使用什么生成办法，2041n v1是使用 <code>TPLINK-LZMA</code> 方法，前面有对应的说明，从里面也可以看到我们需要修改 bin/mktplinkfw 文件的源代码，该源代码在 <code>trunk/tools/firmware-utils/src/mktplinkfw.c</code> 中 接下来可以根据对 TPLINK-LZMA 的定义看到依次传进去的参数，TLWR2041NV1 是 Profile 名称，tl-wr2041n-v1 是生成的镜像名称，也（可能）是传进去的设备型号，TL-WR2041N-v1 最好对应前面 mach 文件 MIPS_MACHINE 函数的信息，主要是在内核日志和系统日志中体现设备型号，后面的是默认 tty 信息以及 baudrate 波特率，接下来的 magic number是设备的硬件ID，1 是版本，一般不用变，4Mlzma是生成固件的layout信息，该值和硬件ID都在 mktplinkfw.c 中定义。</p>
<h5 id="trunk/target/linux/ar71xx/generic/profiles/tp-link-mk"><a href="#trunk/target/linux/ar71xx/generic/profiles/tp-link-mk" class="headerlink" title="trunk/target/linux/ar71xx/generic/profiles/tp-link.mk"></a>trunk/target/linux/ar71xx/generic/profiles/tp-link.mk</h5><p>该文件定义 Profile 信息，主要定义 NAME，会显示在 <code>make menuconfig</code> 之后的设备选项里； PACKAGES 定义默认编译安装的包，一般是网卡驱动以及其他必备的包，如 usb支持。</p>
<p>比如 2041n v1：<br><figure class="highlight mk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define Profile/TLWR2041</span><br><span class="line">trueNAME:=TP-LINK TL-WR2041N</span><br><span class="line">truePACKAGES:=</span><br><span class="line">endef</span><br><span class="line"></span><br><span class="line">define Profile/TLWR2041/Description</span><br><span class="line">truePackage set optimized for the TP-LINK TL-WR2041N.</span><br><span class="line">endef</span><br><span class="line">$(eval $(call Profile,TLWR2041))</span><br></pre></td></tr></table></figure></p>
<h5 id="trunk/tools/firmware-utils/src/mktplinkfw-c"><a href="#trunk/tools/firmware-utils/src/mktplinkfw-c" class="headerlink" title="trunk/tools/firmware-utils/src/mktplinkfw.c"></a>trunk/tools/firmware-utils/src/mktplinkfw.c</h5><p>该文件是生成固件文件的工具，里面包含 TP-LINK 固件 bin 文件的结构和 md5 hash 验证算法，比如定义硬件 magic number，flash layout， 以及其他信息。</p>
<p>比如 2041n v1：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> HWID_TL_WR2041N_V1	<span class="number">0x20410001</span>   <span class="comment">//定义硬件ID</span></span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">truetrue.id		= <span class="string">"TL-WR2041Nv1"</span>,</span><br><span class="line">truetrue.hw_id		= HWID_TL_WR2041N_V1,</span><br><span class="line">truetrue.hw_rev		= <span class="number">1</span>,</span><br><span class="line">truetrue.layout_id	= <span class="string">"4Mlzma"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p>定义使用的信息。</p>
<h5 id="config-3-10"><a href="#config-3-10" class="headerlink" title="config-3.10"></a>config-3.10</h5><p>添加内核支持的 config 信息，与其他的保持一致就好。</p>
<p>比如 2041n v1：</p>
<pre><code>CONFIG_ATH79_MACH_TL_WR2041N_V1=y
</code></pre><p>CONFIG_ 后面的内容和上面 mach 硬件支持文件中定义的保持一致。</p>
<h5 id="patches-3-10/610-MIPS-ath79-openwrt-machines-patch"><a href="#patches-3-10/610-MIPS-ath79-openwrt-machines-patch" class="headerlink" title="patches-3.10/610-MIPS-ath79-openwrt-machines.patch"></a>patches-3.10/610-MIPS-ath79-openwrt-machines.patch</h5><p>这个是内核支持的patch文件，需要使用 quilt 创建以及以后维护，前一阵子trunk将大部分分散的补丁都移动到这个patch中了，如果要将patch提交到官方尽量放在这里，自己用的话不要干扰其他patch的应用就可以了。我这里将补丁编号为920，一般来说是最后一个应用的patch了。</p>
<h4 id="u7BA1_u7406_u8865_u4E01_u6587_u4EF6"><a href="#u7BA1_u7406_u8865_u4E01_u6587_u4EF6" class="headerlink" title="管理补丁文件"></a>管理补丁文件</h4><p>请通过软件包管理器安装 quilt，当然一般如同上文配置好编译环境就已经安装好了 quilt。</p>
<p>然后写入以下配置文件到 <code>~/.quiltrc</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ~/.quiltrc &lt;&lt;EOF</span><br><span class="line">QUILT_DIFF_ARGS=<span class="string">"--no-timestamps --no-index -pab --color=auto"</span></span><br><span class="line">QUILT_REFRESH_ARGS=<span class="string">"--no-timestamps --no-index -pab"</span></span><br><span class="line">QUILT_PATCH_OPTS=<span class="string">"--unified"</span></span><br><span class="line">QUILT_DIFF_OPTS=<span class="string">"-p"</span></span><br><span class="line">EDITOR=<span class="string">"nano"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>接着进行一下 <code>export EDITOR</code> ，当然这个 <code>EDITOR</code> 的变量不要和现有的变量冲突，可以自己任意更改，只要应用到上面的 <code>.quiltrc</code> 文件中就好了。如果怕麻烦可以写到 <code>～/.bashrc</code> 文件中，以后就比较方便，不用每次进行 export。</p>
<p>常用的quilt命令如下，会一一说明: </p>
<pre><code>new        新建空白patch
add        添加要修改的文件到patch中
remove        删除patch
top        查看当前patch位置，相当于一个指针
next        未知
rename        重命名patch
unapplied    查看未成功应用的patch
applied        查看已经成功应用的patch
graph        未知
patches        未知
upgrade        未知
delete        删除patch
grep        应该类似于 grep 命令
pop        去往上一个patch，如果附加patch名称则按照patch序列一直应用到特定的patch位置
series        查看patch列表，一般这个顺序就是patch应用的顺序，可以用来进行 pop 和 push 定位
diff        查看区别
previous    未知
edit        编辑当前patch中的文件
push        去往最新的patch，会一直应用到最后一个可以成功应用的patch
files        查看patch中包含的修改文件
refresh        刷新patch，相当于保存patch到 patches 文件夹，还没有应用到buildroot处
</code></pre><h4 id="u51E0_u79CD_u7BA1_u7406_u64CD_u4F5C"><a href="#u51E0_u79CD_u7BA1_u7406_u64CD_u4F5C" class="headerlink" title="几种管理操作"></a>几种管理操作</h4><h5 id="u589E_u52A0_u4E00_u4E2A_u65B0_u7684Patch"><a href="#u589E_u52A0_u4E00_u4E2A_u65B0_u7684Patch" class="headerlink" title="增加一个新的Patch"></a>增加一个新的Patch</h5><p>为一个现有的软件包添加一个新的 Patch 需要首先准备代码树：</p>
<pre><code>$ make package/example/{clean,prepare} V=s QUILT=1
</code></pre><p>如果是 host-side 的软件包需要进行下面的代码树准备操作：</p>
<pre><code>$ make package/example/host/{clean,prepare} V=s QUILT=1
</code></pre><p>这个步骤将解压源码包的 tarball 并且按照预先排好的 quilt patch 顺序进行准备工作（简单的讲，按照补丁文件前面的序号给 tarball 依次打好补丁），接下来会输出详细的打补丁情况，如果有未成功的会有 Hunk fail 字样；补丁应用成功的话也有两种情况，第一，行号偏移正常，这也就是我们期望的，第二，虽然应用成功了，但是存在代码行号偏移，出现的字样是 offset ，并且会提示补丁具体应用到了哪行，我们可以针对打补丁时给出的提示修改补丁文件的行号，也可以通过 quilt 修改.</p>
<p>接下来切换到代码目录中，值得注意的是，如果在 Makefile 中存在多个编译选项（build variants），需要切换到对应的代码目录中.</p>
<pre><code>$ cd build_dir/target-*/BUILD_VARIANT/example-*
</code></pre><p>接下来应用全部的已存在的补丁文件：</p>
<pre><code>$ quilt push -a
</code></pre><p>通过 <code>quilt new</code> 命令创建一个全新空白的补丁文件：</p>
<pre><code>$ quilt new 010-main_code_fix.patch
</code></pre><p>命名的时候需要注意的是，补丁文件的名字必须以数字开头，一般是三位，并且补足前面的零，数字之后紧跟一个短横线（-），接下来简单描述这个补丁文件是做什么用的，以便以后好查找；选定数字的时候，数字必须大于现有的最后一个 patch 的数字前缀，这个要求的原因可以通过 <code>quilt series</code> 来验证，排序的顺序就是补丁应用的顺序，而排序是通过前面的数字决定的；对补丁文件的描述要言简意赅，尽量用地道的英文术语.</p>
<p>创建好空白的补丁文件之后，必须要有修改的代码文件与之相关联，我们通过 <code>quilt add</code> 来进行这个操作，一旦添加好了文件，就像往常一样进行修改就可以了.<br>可以通过 <code>quilt edit</code> 命令来同时完成上面的关联文件操作以及修改操作，这个修改过程调用的文本编辑器是前面在 <code>.quiltrc</code> 文件里面定义好的 <code>EDITOR</code> 变量，注意export.</p>
<pre><code>$ quilt edit src/main.c  // 通过quilt的edit命令编辑代码文件
</code></pre><p>这样上面的代码文件就被加到这个新建的 patch 中了，这样一直重复操作，直到所有需要添加到该 patch 中的文件都修改完.</p>
<p>所有的修改操作都进行完之后，可以通过 <code>quilt diff</code> 命令查看修改的内容.</p>
<pre><code>$ quilt diff          // 很类似 git diff 不是吗
</code></pre><p>如果发现修改都处于预期，就可以把修改写入到刚才新建的patch文件中了，注意<strong>这时候的patch还在 build_dir 里面</strong>.</p>
<pre><code>$ quilt refresh
</code></pre><p>接下来切换到 buildroot 的顶层目录.</p>
<pre><code>$ cd ../../../      // 这个目录比修改 kernel 补丁时低了一层
</code></pre><p>接下来，我们将刚才新建的 patch 移动到 buildroot ，这样我们就可以将这个补丁进行提交等其他操作了.</p>
<pre><code>$ make package/example/update V=s
</code></pre><p>这样，我们的补丁添加工作就完成了，不放心的话可以通过下面的命令进行验证:</p>
<pre><code>$ make package/example/{clean,compile} package/index V=s
</code></pre><p>如果发现问题，需要重新进行编辑，下面介绍怎么编辑补丁文件.</p>
<h5 id="u7F16_u8F91_u4E00_u4E2A_u73B0_u6709_u7684patch"><a href="#u7F16_u8F91_u4E00_u4E2A_u73B0_u6709_u7684patch" class="headerlink" title="编辑一个现有的patch"></a>编辑一个现有的patch</h5><p>还是需要首先准备代码树:</p>
<pre><code>$ make package/example/{clean,prepare} V=s QUILT=1
</code></pre><p>接下来切换到代码目录中.</p>
<pre><code>$ cd build_dir/target-*/example-*
</code></pre><p>列出现有的所有patch文件：</p>
<pre><code>$ quilt series
</code></pre><p>前往需要编辑的patch文件，当然前提是这个push到的patch需要应用成功，否则需要push到提前一个patch或者push的时候加上 <code>-f</code> 参数强制运行，然后直接<code>quilt edit</code>即可，当然这个是后话.</p>
<pre><code>$ quilt push 010-main_code_fix.patch
</code></pre><p>当输入的patch文件名合法的话，<code>quilt push</code> 命令会只应用patch 系列（patch series）到给出的文件名，所以提前用 <code>quilt series</code> 命令看好文件名再操作，然后用 <code>quilt top</code> 命令看自己当前处于哪个patch中确保万无一失，如果不幸超过了所要去的补丁位置，可以通过 <code>quilt pop</code> 命令移除已经应用的补丁按照列表反向前进.</p>
<p>接下来通过 <code>quilt edit</code> 命令编辑每个需要编辑的文件.</p>
<pre><code>$ quilt edit src/main.c    // 熟悉的命令
</code></pre><p>接下来检查编辑的文件是否被包含在patch中了：</p>
<pre><code>$ quilt files
</code></pre><p>检查更改信息：</p>
<pre><code>$ quilt diff
</code></pre><p>如果发现修改都处于预期，就可以把修改写入patch文件中了，注意<strong>这时候的patch还在 build_dir 里面</strong>.</p>
<pre><code>$ quilt refresh
</code></pre><p>切换到buildroot的顶层目录中.</p>
<pre><code>$ cd ../../../
</code></pre><p>接下来，我们将刚才更新好的patch移动到buildroot中:</p>
<pre><code>$ make package/example/update V=s
</code></pre><p>这样，我们的补丁修改工作就完成了，不放心的话可以通过下面的命令进行验证:</p>
<pre><code>$ make package/example/{clean,compile} package/index V=s
</code></pre><h5 id="u65B0_u589E_u6216_u4FEE_u6539_u5185_u6838_u8865_u4E01"><a href="#u65B0_u589E_u6216_u4FEE_u6539_u5185_u6838_u8865_u4E01" class="headerlink" title="新增或修改内核补丁"></a>新增或修改内核补丁</h5><p>新增和修改内核补丁和操作安装包的补丁差不太多，只有 make 的 target 和操作代码目录是不同的.</p>
<p>特别需要注意的是，对于内核补丁，存在一个附加的子目录，一个是 generic/ 目录，这个里面包含对所有目标架构的补丁文件；另一个是 platform/ 目录，这里面包含特定架构的补丁文件，一般是在 <code>make menuconfig</code> 中配置好的架构，也可以在 <code>.config</code> 文件中找到.</p>
<p>准备内核代码树:</p>
<pre><code>$ make target/linux/{clean,prepare} V=s QUILT=1
</code></pre><p>对稳定版AA（Attitude Adjustment）来说，内核代码树在这里:</p>
<pre><code>$ cd build_dir/linux-*/linux-3.*
</code></pre><p>对主干分支，现在是BB（Barrier Breaker），代码树在这里：</p>
<pre><code>$ cd build_dir/target-*/linux-*/linux-3.*
</code></pre><p>我们将刚才操作好的patch移动到buildroot中通过下面的命令：</p>
<pre><code>$ make target/linux/update package/index V=s
</code></pre><p>注意：Patch文件的前缀必须正确，指明是 generic 还是 platform，如果前缀不正确，可能应用操作会出问题.</p>
<p>不放心的话可以通过下面的命令进行验证，首先去顶层目录，一般是 target/ 所在的目录：</p>
<pre><code>$ cd ../../../../
</code></pre><p>然后再次准备代码树，查看更改是否已经应用了：</p>
<pre><code>$ make target/linux/{clean,prepare} V=s QUILT=1
</code></pre><p>最后要说的是，放置patch的位置很重要，它决定补丁的应用情况.</p>
<h5 id="u589E_u52A0_u6216_u7F16_u8F91_u5DE5_u5177_u94FE_Patch_uFF08_u8FD9_u90E8_u5206_u4E00_u822C_u4E0D_u4F1A_u6D89_u53CA_uFF09"><a href="#u589E_u52A0_u6216_u7F16_u8F91_u5DE5_u5177_u94FE_Patch_uFF08_u8FD9_u90E8_u5206_u4E00_u822C_u4E0D_u4F1A_u6D89_u53CA_uFF09" class="headerlink" title="增加或编辑工具链 Patch（这部分一般不会涉及）"></a>增加或编辑工具链 Patch（这部分一般不会涉及）</h5><p>以 gcc 为例:</p>
<p>编译过toolchain或者是看toolchain目录的主Makefile可以发现gcc有三个编译阶段：initial, minimal和final，如果要修改gcc的patch，需要使用minimal那个阶段。</p>
<p>准备工具链代码树:</p>
<pre><code>$ make toolchain/gcc/minimal/{clean,prepare} V=99 QUILT=1
</code></pre><p>代码树路径取决于选择的库以及 gcc :</p>
<pre><code>$ cd build_dir/toolchain-mips_r2_gcc-4.3.3+cs_uClibc-0.9.30.1/gcc-linaro-&lt;version&gt;
</code></pre><p>通过如下命令更新Patch:</p>
<pre><code>$ make toolchain/gcc/minimal/update V=99
</code></pre><p>对于其余的binutils, gdb, glibc之类的由于没有细分阶段，所以直接按照软件包那样的格式套用就行了。</p>
<p>比如 <code>make toolchain/(gdb|glibc|binutils)/{clean,prepare} V=99 QUILT=1</code>, <code>make toolchain/(gdb|glibc|binutils)/update V=99</code></p>
<h5 id="u5237_u65B0Patch"><a href="#u5237_u65B0Patch" class="headerlink" title="刷新Patch"></a>刷新Patch</h5><p>当软件包更新或者内核更新时，现有的patch文件可能不会完全应用或者存在其他提示。想要重新构建Patch列表中的全部patch可以使用make目标：refresh.</p>
<pre><code>$ make package/example/refresh V=s    // 软件包
$ make target/linux/refresh V=s       // 内核
</code></pre><h5 id="u4E0D_u6E05_u7406_u4EE3_u7801_u6811_u91CD_u590D_u4FEE_u6539_u8865_u4E01"><a href="#u4E0D_u6E05_u7406_u4EE3_u7801_u6811_u91CD_u590D_u4FEE_u6539_u8865_u4E01" class="headerlink" title="不清理代码树重复修改补丁"></a>不清理代码树重复修改补丁</h5><p>当需要引入新功能做更改时，经常需要多次修改补丁。为了加速，可以在编辑操作（edit）之间保留做完准备操作的代码树.</p>
<ol>
<li>刚开始如上文所述准备好代码树;</li>
<li>切换到准备好的代码目录;</li>
<li>前往需要修改的patch位置;</li>
<li>修改文件并保存对patch文件的更改;</li>
<li>通过 <code>quilt push -a</code> 命令完全应用剩下的补丁文件;</li>
<li>切换到顶层目录运行 <code>make package/example/{compile,install}</code> ，如果是内核的补丁，使用 <code>make target/linux/{compile,install}</code> 命令;</li>
<li>测试二进制文件。如果再次需要进行更改，从第二步重复操作；</li>
<li>最后使用 <code>make package/example/update</code> 命令 ，如果是内核补丁，使用 <code>make target/linux/update</code> 命令将patch文件应用到buildroot中。</li>
</ol>
<h5 id="u51C6_u5907_linux__u5185_u6838_patch_uFF08_u65E7_uFF09"><a href="#u51C6_u5907_linux__u5185_u6838_patch_uFF08_u65E7_uFF09" class="headerlink" title="准备 linux 内核 patch（旧）"></a>准备 linux 内核 patch（旧）</h5><p>到这里基本就完成了 OpenWrt 的设备支持代码. 为了支持我们的设备, Linux 代码树的部分文件也需要做改动, OpenWrt 采用了 patch 的方式实现.</p>
<p>回退到源代码的根目录 <code>~/trunk</code> .</p>
<p>清理并准备 patch 树:</p>
<pre><code>$ make target/linux/{clean,prepare} V=s QUILT=1
</code></pre><p>进入内核代码目录:</p>
<pre><code>$ cd build_dir/target-*/linux-ar71xx_generic/linux-3.x/
</code></pre><p>这里就是内核代码树了, 里面的代码是已经打过所有 patch 的, 可以用 <code>quilt push</code> 检查看是不是这样:</p>
<pre><code>$ quilt push
</code></pre><blockquote>
<p>File series fully applied, ends at patch platform/xxx-xxxxxxxxxxxxxx.patch.</p>
</blockquote>
<p>这条输出也告诉我们, 当前最顶的 patch 是 platform/xxx</p>
<p>为我的 WL-WR2041N v1 新建个 patch:</p>
<pre><code>$ quilt new platform/920-MIPS-ath79-add-TL-WR2041N-v1-support.patch
</code></pre><p>选择的数字需要大于刚才的那个 xxx , 然后 quilt 会自动把这个 patch 设置为当前 patch, 所有的改动都针对这个 patch.</p>
<p>注意修改文件之前一定要看自己位于哪个patch下，否则修改都会更新到那个patch.</p>
<p>然后就是增加代码了</p>
<pre><code>$ quilt edit arch/mips/ath79/Kconfig
$ quilt edit arch/mips/ath79/Makefile
$ quilt edit arch/mips/ath79/machtypes.h
</code></pre><p>至于怎么改, 参考这些文件里其他硬件的配置</p>
<p>比如 2041n v1:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">--- a/arch/mips/ath79/Kconfig</span><br><span class="line">+++ b/arch/mips/ath79/Kconfig</span><br><span class="line">@@ -<span class="number">900</span>,<span class="number">6</span> +<span class="number">900</span>,<span class="number">16</span> @@ config ATH79_MACH_TL_WR1043ND_V2</span><br><span class="line"> 	select ATH79_DEV_USB</span><br><span class="line"> 	select ATH79_DEV_WMAC</span><br><span class="line"> </span><br><span class="line">+config ATH79_MACH_TL_WR2041N_V1</span><br><span class="line">+	bool <span class="string">"TP-LINK TL-WR2041N v1 board support"</span></span><br><span class="line">+	select SOC_AR934X</span><br><span class="line">+	select ATH79_DEV_AP9X_PCI <span class="keyword">if</span> PCI</span><br><span class="line">+	select ATH79_DEV_ETH</span><br><span class="line">+	select ATH79_DEV_GPIO_BUTTONS</span><br><span class="line">+	select ATH79_DEV_LEDS_GPIO</span><br><span class="line">+	select ATH79_DEV_M25P80</span><br><span class="line">+ 	select ATH79_DEV_WMAC</span><br><span class="line">+</span><br><span class="line"> config ATH79_MACH_TL_WR2543N</span><br><span class="line"> 	bool <span class="string">"TP-LINK TL-WR2543N/ND support"</span></span><br><span class="line"> 	select SOC_AR724X</span><br><span class="line">--- a/arch/mips/ath79/Makefile</span><br><span class="line">+++ b/arch/mips/ath79/Makefile</span><br><span class="line">@@ -<span class="number">116</span>,<span class="number">6</span> +<span class="number">116</span>,<span class="number">7</span> @@ obj-$(CONFIG_ATH79_MACH_TL_WR841N_V9)	+=</span><br><span class="line"> obj-$(CONFIG_ATH79_MACH_TL_WR941ND)	+= mach-tl-wr941nd.o</span><br><span class="line"> obj-$(CONFIG_ATH79_MACH_TL_WR1041N_V2)	+= mach-tl-wr1041n-v2.o</span><br><span class="line"> obj-$(CONFIG_ATH79_MACH_TL_WR1043ND)	+= mach-tl-wr1043nd.o</span><br><span class="line">+obj-$(CONFIG_ATH79_MACH_TL_WR2041N_V1)	+= mach-tl-wr2041n-v1.o</span><br><span class="line"> obj-$(CONFIG_ATH79_MACH_TL_WR1043ND_V2)	+= mach-tl-wr1043nd-v2.o</span><br><span class="line"> obj-$(CONFIG_ATH79_MACH_TL_WR2543N)	+= mach-tl-wr2543n.o</span><br><span class="line"> obj-$(CONFIG_ATH79_MACH_TL_WR703N)	+= mach-tl-wr703n.o</span><br><span class="line">--- a/arch/mips/ath79/machtypes.h</span><br><span class="line">+++ b/arch/mips/ath79/machtypes.h</span><br><span class="line">@@ -<span class="number">134</span>,<span class="number">6</span> +<span class="number">134</span>,<span class="number">7</span> @@ enum ath79_mach_<span class="built_in">type</span> &#123;</span><br><span class="line"> 	ATH79_MACH_TL_WR1041N_V2,	/* TP-LINK TL-WR1041N v2 */</span><br><span class="line"> 	ATH79_MACH_TL_WR1043ND,		/* TP-LINK TL-WR1043ND */</span><br><span class="line"> 	ATH79_MACH_TL_WR1043ND_V2,	/* TP-LINK TL-WR1043ND v2 */</span><br><span class="line">+	ATH79_MACH_TL_WR2041N_V1,       /* TP-LINK TL-WR2041N v1 */</span><br><span class="line"> 	ATH79_MACH_TL_WR2543N,		/* TP-LINK TL-WR2543N/ND */</span><br><span class="line"> 	ATH79_MACH_TL_WR703N,		/* TP-LINK TL-WR703N */</span><br><span class="line"> 	ATH79_MACH_TL_WR710N,		/* TP-LINK TL-WR710N */</span><br></pre></td></tr></table></figure></p>
<p>仅作为参考。</p>
<p>然后验证下修改的内容:</p>
<pre><code>$ quilt diff # 查看 diff
$ quilt refresh # 保存所有 diff 到 patch 文件
</code></pre><p>这个时候我们的 patch 文件还在 build_dir 里, 大概位置是 <code>patches/platform/</code> 下. 需要同步到 OpenWrt 代码树.</p>
<p>退回到顶层工作目录, 执行:</p>
<pre><code>$ make target/linux/update V=s
</code></pre><p>同步完成后, patch 文件会出现在 <code>target/linux/ar71xx/patches-3.x/</code> 下.</p>
<p>以后代码更新后需要编辑 patch 时，遵从上面的 quilt 对 patch 的管理操作。</p>
<h5 id="u51C6_u5907_linux__u5185_u6838_u677F_u7EA7_u652F_u6301_uFF08_u65B0_uFF09"><a href="#u51C6_u5907_linux__u5185_u6838_u677F_u7EA7_u652F_u6301_uFF08_u65B0_uFF09" class="headerlink" title="准备 linux 内核板级支持（新）"></a>准备 linux 内核板级支持（新）</h5><p>从 <a href="https://github.com/openwrt/openwrt/commit/1e82d9f741cd827e33bfa3d8b3cadffaeb2773c1" target="_blank" rel="external">https://github.com/openwrt/openwrt/commit/1e82d9f741cd827e33bfa3d8b3cadffaeb2773c1</a> 开始重新安排了linux内核的板级支持架构，以后添加新板子可以不用添加patch，只需要修改如下文件（目前仅限于 ar71xx）：</p>
<blockquote>
<p>target/linux/ar71xx/files/arch/mips/ath79/Kconfig.openwrt<br>target/linux/ar71xx/files/arch/mips/ath79/Makefile<br>target/linux/ar71xx/files/arch/mips/ath79/machtypes.h  </p>
</blockquote>
<p>对于原来修改 <code>arch/mips/ath79/Kconfig</code>的，添加到<code>Kconfig.openwrt</code>里面，以此类推，可以参考上面所述以前添加linux内核patch的说明照猫画虎。官方的这种修改避免每次添加新板子需要重新组织内核patch序列，不管是OP的核心开发者合并修改还是给项目贡献代码都很方便。</p>
<h5 id="u5F00_u59CB_u7F16_u8BD1-1"><a href="#u5F00_u59CB_u7F16_u8BD1-1" class="headerlink" title="开始编译"></a>开始编译</h5><p>再次记得, <strong>删除 tmp 目录</strong></p>
<pre><code>$ rm -rvf tmp/
$ make menuconfig
</code></pre><h4 id="u51E0_u4E2A_u95EE_u9898_u89E3_u51B3_u7684_u6848_u4F8B"><a href="#u51E0_u4E2A_u95EE_u9898_u89E3_u51B3_u7684_u6848_u4F8B" class="headerlink" title="几个问题解决的案例"></a>几个问题解决的案例</h4><h5 id="u53C2_u8003_u94FE_u63A5"><a href="#u53C2_u8003_u94FE_u63A5" class="headerlink" title="参考链接"></a>参考链接</h5><blockquote>
<p><a href="http://wiki.openwrt.org/doc/devel/add.new.device" target="_blank" rel="external">http://wiki.openwrt.org/doc/devel/add.new.device</a><br><a href="http://wiki.openwrt.org/doc/devel/hw.hacking.first.steps" target="_blank" rel="external">http://wiki.openwrt.org/doc/devel/hw.hacking.first.steps</a><br><a href="http://wiki.openwrt.org/doc/devel/patches" target="_blank" rel="external">http://wiki.openwrt.org/doc/devel/patches</a><br><a href="http://andelf.diandian.com/post/2013-05-22/40050677370" target="_blank" rel="external">http://andelf.diandian.com/post/2013-05-22/40050677370</a><br><a href="http://tilt.lib.tsinghua.edu.cn/node/841" target="_blank" rel="external">http://tilt.lib.tsinghua.edu.cn/node/841</a><br><a href="http://www.openwrt.org.cn/bbs/forum.php?mod=viewthread&amp;tid=211" target="_blank" rel="external">http://www.openwrt.org.cn/bbs/forum.php?mod=viewthread&amp;tid=211</a><br><a href="http://www.tuicool.com/kans/481707042" target="_blank" rel="external">http://www.tuicool.com/kans/481707042</a><br><a href="http://www.openwrt.org.cn/bbs/forum.php?mod=viewthread&amp;tid=60&amp;extra=page%3D1" target="_blank" rel="external">http://www.openwrt.org.cn/bbs/forum.php?mod=viewthread&amp;tid=60&amp;extra=page%3D1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://openwrt.org/.styles/img/openwrt-logo.png" alt=""></p>]]>
    
    </summary>
    
      <category term="OpenWRT" scheme="http://www.router008.com/tags/OpenWRT/"/>
    
      <category term="路由器" scheme="http://www.router008.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="OpenWRT" scheme="http://www.router008.com/categories/OpenWRT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu开发环境搭建]]></title>
    <link href="http://www.router008.com/2016/02/05/ubuntu-development-environment/"/>
    <id>http://www.router008.com/2016/02/05/ubuntu-development-environment/</id>
    <published>2016-02-05T08:55:24.000Z</published>
    <updated>2016-05-09T13:36:30.974Z</updated>
    <content type="html"><![CDATA[<h2 id="u4E00-__u5B89_u88C5C_uFF0FC_uFF0B_uFF0B_u7A0B_u5E8F_u7684_u5F00_u53D1_u73AF_u5883"><a href="#u4E00-__u5B89_u88C5C_uFF0FC_uFF0B_uFF0B_u7A0B_u5E8F_u7684_u5F00_u53D1_u73AF_u5883" class="headerlink" title="一. 安装C／C＋＋程序的开发环境"></a>一. 安装C／C＋＋程序的开发环境</h2><pre><code>sudo apt-get install build-essential //安装主要编译工具 包括gcc, g++, make 
sudo apt-get install autoconf automake //安装时apt-get 推荐用 automake 代替 automake1.9
sudo apt-get install flex bison //flex 经常和自由软件 Bison 语法分析器生成器一起使用
sudo apt-get install manpages-dev //安装C语言函数man文档 
sudo apt-get install binutils-doc cpp-doc gcc-doc glibc-doc stl-manual //安装相关文档
</code></pre><a id="more"></a>
<h2 id="u4E8C-__u5B89_u88C5Gnome_u684C_u9762_u7A0B_u5E8F_u7684_u5F00_u53D1_u73AF_u5883"><a href="#u4E8C-__u5B89_u88C5Gnome_u684C_u9762_u7A0B_u5E8F_u7684_u5F00_u53D1_u73AF_u5883" class="headerlink" title="二. 安装Gnome桌面程序的开发环境"></a>二. 安装Gnome桌面程序的开发环境</h2><pre><code>sudo apt-get install gnome-core-devel //安装核心文件 
sudo apt-get install pkg-config 
sudo apt-get install devhelp //安装GTK文档查看程序 
sudo apt-get install libglib2.0-doc libgtk2.0-doc //安装 API参考手册及其它帮助文档 
sudo apt-get instal glade libglade2-dev //安装GTK界面构造程序 
</code></pre><h2 id="u4E09-__u5B89_u88C5JAVA_u5F00_u53D1_u73AF_u5883"><a href="#u4E09-__u5B89_u88C5JAVA_u5F00_u53D1_u73AF_u5883" class="headerlink" title="三. 安装JAVA开发环境"></a>三. 安装JAVA开发环境</h2><pre><code>sudo apt-get install sun-java6-jdk sun-java6-doc sun-java6-source //安装核心开发用具，相关文档 
sudo update-alternatives --config java //通常给出两个或多个JRE选择路径 选择：/usr/lib/jvm/java-1.5.0-sun/jre/bin/java作为你的JAVA运行环境 
sudo vim /etc/environment //配置环境变量，添加如下两行： 
CLASSPATH=/usr/lib/jvm/java-6-sun/lib 
JAVA_HOME=/usr/lib/jvm/java-6-sun 
sudo apt-get install eclipse //安装eclipse 
sudo update-java-alternatives -s java-6-sun //SUN版本的JAVA 设置为系统默认 JDK 
sudo vim /etc/jvm //编辑 JVM 配置文件， 将文件中的/usr/lib/jvm/java-6-sun放到配 置文件的顶部 
sudo vim /etc/eclipse/java_home //操作如上
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4E00-__u5B89_u88C5C_uFF0FC_uFF0B_uFF0B_u7A0B_u5E8F_u7684_u5F00_u53D1_u73AF_u5883"><a href="#u4E00-__u5B89_u88C5C_uFF0FC_uFF0B_uFF0B_u7A0B_u5E8F_u7684_u5F00_u53D1_u73AF_u5883" class="headerlink" title="一. 安装C／C＋＋程序的开发环境"></a>一. 安装C／C＋＋程序的开发环境</h2><pre><code>sudo apt-get install build-essential //安装主要编译工具 包括gcc, g++, make 
sudo apt-get install autoconf automake //安装时apt-get 推荐用 automake 代替 automake1.9
sudo apt-get install flex bison //flex 经常和自由软件 Bison 语法分析器生成器一起使用
sudo apt-get install manpages-dev //安装C语言函数man文档 
sudo apt-get install binutils-doc cpp-doc gcc-doc glibc-doc stl-manual //安装相关文档
</code></pre>]]>
    
    </summary>
    
      <category term="developmen" scheme="http://www.router008.com/tags/developmen/"/>
    
      <category term="编程开发" scheme="http://www.router008.com/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scratch]]></title>
    <link href="http://www.router008.com/2016/02/04/Scratch/"/>
    <id>http://www.router008.com/2016/02/04/Scratch/</id>
    <published>2016-02-03T17:16:27.000Z</published>
    <updated>2016-05-09T13:36:56.536Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B.jpg" alt=""><br>过去的已成回忆！过去的就让他过去吧！由于之前的文章写的太杂乱，重新写吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xpjbv.com1.z0.glb.clouddn.com/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B.jpg" alt=""><br>过去的已成回忆！过去的就让他过去吧！由于之前的文章写的太杂乱，重新写吧！]]>
    </summary>
    
      <category term="生活" scheme="http://www.router008.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="杂碎" scheme="http://www.router008.com/categories/%E6%9D%82%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://www.router008.com/2016/02/02/hello-world/"/>
    <id>http://www.router008.com/2016/02/02/hello-world/</id>
    <published>2016-02-02T15:14:12.000Z</published>
    <updated>2016-05-09T13:37:12.343Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://www.router008.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="杂碎" scheme="http://www.router008.com/categories/%E6%9D%82%E7%A2%8E/"/>
    
  </entry>
  
</feed>
